#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'
require_relative './cptree.rb'

class CParser < Racc::Parser

module_eval(<<'...end cparse.y/module_eval...', 'cparse.y', 539)

  include CPTree

  C_KEYWORDS = /(auto|break|case|char|const|continue|default|do(uble)?\
|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed\
|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while\
|inline|__builtin_va_list|__attribute__|__mode__|__extension__\
|__restrict|__const|__asm__|__nonnull__)\b/

  PUNCTS = /(\.\.\.|->|[-+*%\/&^|=!<>]=|\
>>=|<<=|\+\+|--|&&|\|\||<<|>>|<:|>:|<%|%>|\
[-\[\](){}.&*%+~!\/<>^\|?:=,])/

  def parse(io, flags)
    @fp = io
    @line = nil
    @filename = @fp.respond_to?(:path) ? @fp.path : "(stdin)"
    @lineno = 0
    @doxygenp = false # whether in doxygen comment or not
    @commentp = false
    @yydebug = $DEBUG
    @typedeftab = {}
    @parseflags = flags
    @last_pos = [nil, nil]
    do_parse
  end

unless $DEBUG
  def show(tos)
    if Array === tos
      return '[' + tos.collect{ |elem| show(elem) }.join(', ') + ']'
    elsif tos.respond_to?(:cstr)
      return '<' + tos.cstr + '>'
    else
      return tos.inspect
    end
  end

  def on_error token, val, stack
    puts "syntax error on #{@filename}:#{@lineno} " +
      "near token #{val.inspect} (#{token_to_str token})"
    puts '<' + @line.string.chomp + '>' if @line
    puts show(stack)
    raise Racc::ParseError, "syntax error"
  end
end

  def getline
    cpp_cont = false
    while true
      line = @fp.gets
      throw(:EOF, nil) if line.nil?
      line.chomp!
      @lineno = @lineno.succ
      if cpp_cont
	unless /\\$/ =~ line
	  cpp_cont = false
	end
      else
	case line
	when /^\s*#.*\\$/
	  cpp_cont = true
	when /^# (\d+) "([^\x22]+)"/
	  @filename = $2
	  @lineno = $1.to_i - 1
	when /^\s*#/
	  # do_nothing
	else
	  return @line = StringScanner.new(line)
	end
      end
    end
  end

  def next_token
    t = next_token_core
    t
  end

  def next_token_core
    while true
      while @line.nil? || @line.eos?
        t = catch(:EOF) { getline }
        return [false, '$EOF'] if t.nil?
      end
      if @commentp
	if @line.skip(%r<([^*]|\*[^/])*\*\/\s*>)
	  @commentp = false
	else
	  @line = nil
	  next
	end
      end
      if @doxygenp
	if @line.scan(/(\s+)/)
	  return [:COMMENT, @line[0]]
	elsif @line.scan(%r<(.*)\*\/\s*>)
	  @doxygenp = false
	  return [:COMMENT, @line[1]]
	elsif @line.scan(/(.*)/)
	  return [:COMMENT, @line[0]]
	end
      else
        @line.skip(/\A\s+/)
	if @line.scan(/(\/\*\*<)/)
	  @doxygenp = true
	  return [:PostMarkupLeader, @line[0]]
	elsif @line.scan(/(\/\*\*)/)
	  @doxygenp = true
	  return [:PreMarkupLeader, @line[0]]
	end
        @line.skip(%r!\A\/\*([^\*]|\*[^\/])*\*\/\s*!)
	next if @line.eos?
	if @line.scan(%r<\/\*>)
	  @commentp = true
	  next
	elsif token = @line.scan(/;/)
	  @last_pos = [@filename, @lineno]
	  return [token, token]
        elsif token = @line.scan(PUNCTS)
	  return [token, token]
	elsif token = @line.scan(/[+-]?0x([0-9a-f]+\.[0-9a-f]*|\.[0-9a-f]+)p[+-]?\d+[FL]?\b/i)
	  return [:FLOAT, token]
	elsif token = @line.scan(/[+-]?(\d+\.\d*|\.\d+)(e[+-]?\d+)?[FL]?\b/i)
	  return [:FLOAT, token]
	elsif token = @line.scan(/0[0-7]*(u|ul|ull|l|ll|lu|llu)?\b/i)
	  return [:INTEGER, token]
	elsif token = @line.scan(/0x[0-9a-f]+(u|ul|ull|l|ll|lu|llu)?\b/i)
	  return [:INTEGER, token]
	elsif token = @line.scan(/[+-]?\d+(u|ul|ull|l|ll|lu|llu)?\b/i)
	  return [:INTEGER, token]
	elsif token = @line.scan(/'([^\\\']|\\([^0-7x]|[0-7]{1,3}|x[0-9A-Fa-f]+))'/)
	  return [:CHARACTER, token]
	elsif token = @line.scan(/"([^\\\x22]|\\.)*"/)
	  return [:STRING, token]
	elsif token = @line.scan(C_KEYWORDS)
	  return [token, token]
	elsif token = @line.scan(/([_a-zA-Z]\w*)\b/)
	  if @typedeftab[token] then
	    return [:TYPEDEF_NAME, token]
	  else
	    return [:IDENTIFIER, token]
	  end
	elsif token = @line.scan(/\S+/)
	  return [:BadToken, token]
	end
      end
    end
  end

  def extdecl(decl)
    if handler = @parseflags[:on_extdecl]
      for variable in decl
        next if variable.name.nil?
	variable.pos = @last_pos
        if handler.respond_to?(:call)
	  handler.call(variable)
	else
	  handler.push(variable)
	end
      end
    end
  end

...end cparse.y/module_eval...
##### State transition tables begin ###

clist = [
'130,46,189,131,132,46,74,75,272,74,75,87,79,129,46,321,272,46,46,46',
'100,46,138,139,140,141,142,143,48,79,373,380,271,103,44,123,321,44,44',
'44,348,44,59,168,44,78,37,77,285,281,73,48,45,45,45,379,45,257,237,281',
'168,59,78,34,35,36,46,362,189,285,85,101,102,108,109,110,111,112,113',
'114,115,116,285,264,264,130,44,264,131,132,46,236,285,125,126,128,133',
'134,129,375,361,45,362,46,46,100,335,138,139,140,141,142,143,48,44,386',
'240,241,103,52,123,238,239,44,44,336,337,338,366,45,189,37,264,168,46',
'361,61,65,45,45,66,48,447,168,189,179,59,52,34,35,36,48,65,147,44,66',
'101,102,108,109,110,111,112,113,114,115,116,61,65,45,130,66,437,131',
'132,74,75,189,125,126,128,133,134,129,298,384,367,335,189,189,100,32',
'138,139,140,141,142,143,48,52,230,231,232,103,411,123,336,337,338,189',
'383,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,59,286',
'39,40,148,65,41,339,66,351,101,102,108,109,110,111,112,113,114,115,116',
'188,74,75,130,372,189,131,132,457,189,189,125,126,128,133,134,129,392',
'230,231,232,52,342,100,32,138,139,140,141,142,143,48,341,87,390,185',
'103,342,123,342,449,440,189,441,37,15,16,17,18,19,20,21,22,23,24,25',
'26,27,28,29,33,34,35,36,59,52,39,40,254,65,41,187,66,394,101,102,108',
'109,110,111,112,113,114,115,116,150,65,397,130,66,152,131,132,432,398',
'189,125,126,128,133,134,129,32,230,231,232,228,229,100,52,138,139,140',
'141,142,143,48,381,430,382,189,103,37,123,230,231,232,228,229,21,22',
'23,24,25,26,27,28,29,33,34,35,36,87,65,39,40,66,278,41,59,230,231,232',
'228,229,226,227,323,378,101,102,108,109,110,111,112,113,114,115,116',
'376,404,377,130,192,193,131,132,322,85,189,125,126,128,133,134,129,32',
'368,458,189,441,87,100,86,138,139,140,141,142,143,48,194,85,196,197',
'103,37,123,198,418,199,420,421,21,22,23,24,25,26,27,28,29,33,34,35,36',
'423,87,39,266,214,87,41,59,230,231,232,228,229,226,227,52,248,101,102',
'108,109,110,111,112,113,114,115,116,87,427,428,130,429,343,131,132,153',
'154,256,125,126,128,133,134,129,385,297,438,439,346,442,173,87,138,139',
'140,141,142,143,130,294,444,131,132,288,52,123,450,32,87,354,163,129',
'277,423,453,276,85,52,100,49,138,139,140,141,142,143,48,37,155,369,275',
'103,,123,21,22,23,24,25,26,27,28,29,33,34,35,36,,,39,40,,,41,,,,,,59',
',,,125,126,128,133,134,,101,102,108,109,110,111,112,113,114,115,116',
',,,130,,,131,132,,,,125,126,128,133,134,129,,,32,,,,100,,138,139,140',
'141,142,143,48,,,,,103,,123,37,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,33,34,35,36,,,39,40,,59,41,230,231,232,228,229,226,227,,101,102',
'108,109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126,128',
'133,134,129,32,,,,,,100,,138,139,140,141,142,143,48,,,,,103,37,123,',
',,,,21,22,23,24,25,26,27,28,29,33,34,35,36,,,39,40,,,41,59,230,231,232',
'228,229,226,227,,,101,102,108,109,110,111,112,113,114,115,116,,,,130',
',,131,132,,,,125,126,128,133,134,129,,,32,,,,100,,138,139,140,141,142',
'143,48,,,,,103,,123,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29',
'33,34,35,36,,,39,40,,59,41,,,,,,,,,101,102,108,109,110,111,112,113,114',
'115,116,,,,130,,,131,132,,,,125,126,128,133,134,129,,,,,,,173,,138,139',
'140,141,142,143,130,,,131,132,,,123,435,,,,,129,,,,,,,173,,138,139,140',
'141,142,143,130,,,131,132,,,123,433,,,,,129,,,,,,,100,,138,139,140,141',
'142,143,48,203,,,,103,,123,,125,126,128,133,134,,,,,204,205,206,207',
'208,209,210,211,212,213,,,,,,59,,,,125,126,128,133,134,,101,102,108',
'109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126,128,133',
'134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,,,,,',
'129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,253,416,123,,,',
',,129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,,125,126',
'128,133,134,129,,,,,,,173,,138,139,140,141,142,143,,,,,,412,,123,125',
'126,128,133,134,,,,,,,,,130,,,131,132,,,,,,,,,129,,125,126,128,133,134',
'173,,138,139,140,141,142,143,,130,,,131,132,,123,409,,,,,,129,,125,126',
'128,133,134,173,,138,139,140,141,142,143,130,,,131,132,,,123,,,,,,129',
',,,,,,100,,138,139,140,141,142,143,48,,,,,103,,123,125,126,128,133,134',
'230,231,232,228,229,226,227,222,223,225,224,220,221,219,218,217,216',
'215,,,59,,,,125,126,128,133,134,,101,102,108,109,110,111,112,113,114',
'115,116,,,,130,,,131,132,,,,125,126,128,133,134,129,,,32,,,,100,,138',
'139,140,141,142,143,48,,,174,,103,,123,37,15,16,17,18,19,20,21,22,23',
'24,25,26,27,28,29,33,34,35,36,,,39,40,,59,41,,,,,,,,,101,102,108,109',
'110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126,128,133,134',
'129,,,32,,,,100,,138,139,140,141,142,143,48,,,402,,103,,123,37,15,16',
'17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,,,39,40,,59,41,,',
',,,,,,101,102,108,109,110,111,112,113,114,115,116,,,,130,,,131,132,',
',,125,126,128,133,134,129,,,,,,,100,32,138,139,140,141,142,143,48,,',
',11,103,,123,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33',
'34,35,36,59,105,39,40,,,41,,,,101,102,108,109,110,111,112,113,114,115',
'116,,,,130,,,131,132,,,,125,126,128,133,134,129,,,,,,,173,,138,139,140',
'141,142,143,130,,,131,132,,,123,,,,,,129,,,,,,,100,,138,139,140,141',
'142,143,48,,,,,103,,123,,,,,,400,230,231,232,228,229,226,227,222,223',
'225,224,220,221,219,218,217,216,,,59,,,,125,126,128,133,134,,101,102',
'108,109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126,128',
'133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,',
',,,,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,,,,,',
'129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,,125,126',
'128,133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,370',
',123,125,126,128,133,134,129,,,,,,,100,,138,139,140,141,142,143,48,',
',,,103,,123,125,126,128,133,134,230,231,232,228,229,226,227,222,223',
'225,224,220,221,219,218,217,,,,,59,,,,125,126,128,133,134,,101,102,108',
'109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126,128,133',
'134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,,,,,',
'129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,,,,,,363',
'129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,125,126,128',
'133,134,129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,125',
'126,128,133,134,169,129,,,,,,,173,,138,139,140,141,142,143,130,,,131',
'132,,,123,125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143',
',,,,,,,123,125,126,128,133,134,,,,,,,,,,130,,,131,132,,,,,,,253,,129',
',125,126,128,133,134,173,32,138,139,140,141,142,143,,,,,,,,123,,,,,',
'37,,125,126,128,133,134,21,22,23,24,25,26,27,28,29,33,34,35,36,,,39',
'40,130,,41,131,132,,,,,,,,,129,,,32,,,,173,,138,139,140,141,142,143',
'125,126,128,133,134,,,123,37,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,33,34,35,36,,130,39,40,131,132,41,,,,,,,,129,,,,,,,100,32,138',
'139,140,141,142,143,48,,,,11,103,,123,125,126,128,133,134,37,15,16,17',
'18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,59,182,39,40,,,41,,',
',101,102,108,109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125',
'126,128,133,134,129,,,,,,,100,,138,139,140,141,142,143,130,,85,131,132',
'103,,123,,,,,,129,,,,,,,173,,138,139,140,141,142,143,,,,,,59,,123,325',
',,,,,,101,102,108,109,110,111,112,113,114,115,116,,,,130,,,131,132,',
',,125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131',
'132,,,123,125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143',
'130,,,131,132,,,123,,,,,,129,,,,,,,173,,138,139,140,141,142,143,,130',
',,131,132,,123,,125,126,128,133,134,129,,,,,,,100,,138,139,140,141,142',
'143,48,,,,,103,,123,125,126,128,133,134,230,231,232,228,229,226,227',
'222,223,225,224,220,221,219,218,,,,,,59,190,,125,126,128,133,134,,,101',
'102,108,109,110,111,112,113,114,115,116,,,,130,,,131,132,,,,125,126',
'128,133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123',
',,,,,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,,,,',
',129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,,125,126',
'128,133,134,129,,,,,,,100,,138,139,140,141,142,143,48,,,,,103,,123,125',
'126,128,133,134,230,231,232,228,229,226,227,222,223,225,224,220,221',
'219,,,,,,,59,,,125,126,128,133,134,,,101,102,108,109,110,111,112,113',
'114,115,116,,,,130,,,131,132,,,,125,126,128,133,134,129,,,,,,,173,,138',
'139,140,141,142,143,130,,,131,132,,,123,,,,,,129,,,,,,,173,,138,139',
'140,141,142,143,130,,,131,132,,,123,,,,,,129,,,,,,,173,,138,139,140',
'141,142,143,,130,,,131,132,,123,,125,126,128,133,134,129,,,,,,,173,',
'138,139,140,141,142,143,130,,,131,132,,,123,125,126,128,133,134,129',
',,,,,,173,,138,139,140,141,142,143,130,,,131,132,200,,123,125,126,128',
'133,134,129,,,,,,,173,,138,139,140,141,142,143,,130,,,131,132,,123,',
'125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131',
'132,,,123,125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143',
',,,,,,,123,125,126,128,133,134,,,,,,,,,,130,,,131,132,,,,,,,,,129,,125',
'126,128,133,134,173,32,138,139,140,141,142,143,,,,,,,,123,,,,,,37,,125',
'126,128,133,134,21,22,23,24,25,26,27,28,29,33,34,35,36,,,39,40,130,',
'41,131,132,,,,,,,,,129,,,,,,,173,,138,139,140,141,142,143,125,126,128',
'133,134,130,,123,131,132,,,,,,,,,129,,,,,,,173,,138,139,140,141,142',
'143,,,130,,,131,132,243,,,,,,,,129,,,,,,,173,,138,139,140,141,142,143',
',,125,126,128,133,134,123,230,231,232,228,229,226,227,222,223,225,224',
',130,,,131,132,,,,,,,,,129,,125,126,128,133,134,173,,138,139,140,141',
'142,143,,,130,,,131,132,123,,,,,,,,129,,125,126,128,133,134,173,,138',
'139,140,141,142,143,,,,,,130,,247,131,132,,,,,,,,,129,,,,,,,173,,138',
'139,140,141,142,143,,,125,126,128,133,134,123,,,,,,,,,,130,,,131,132',
',,,,,,,,129,,125,126,128,133,134,173,,138,139,140,141,142,143,,,,,,130',
',123,131,132,,,,,,,,,129,,125,126,128,133,134,173,,138,139,140,141,142',
'143,,,130,,,131,132,123,,,,,,,,129,,,,,,,173,,138,139,140,141,142,143',
',,125,126,128,133,134,123,230,231,232,228,229,226,227,222,223,225,224',
'220,221,130,,,131,132,,,,,,,,253,129,125,126,128,133,134,,173,,138,139',
'140,141,142,143,,130,,,131,132,,123,,,,,,,129,,125,126,128,133,134,173',
',138,139,140,141,142,143,130,,,131,132,,,123,,,,,,129,,,,,,,173,,138',
'139,140,141,142,143,130,,,131,132,,,123,125,126,128,133,134,129,,,,',
',,173,,138,139,140,141,142,143,,130,,,131,132,,123,,125,126,128,133',
'134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123,125,126',
'128,133,134,129,,,,,,,173,,138,139,140,141,142,143,130,,,131,132,,,123',
'125,126,128,133,134,129,,,,,,,173,,138,139,140,141,142,143,,,,,,295',
',123,,125,126,128,133,134,,,,,,,,,130,,,131,132,,,,,,,,,129,,125,126',
'128,133,134,173,46,138,139,140,141,142,143,,,,,,,,243,,,,,,44,32,125',
'126,128,133,134,,,,,,,,,281,357,,,,,37,15,16,17,18,19,20,21,22,23,24',
'25,26,27,28,29,33,34,35,36,46,,39,40,,,41,285,,,,125,126,128,133,134',
',,,,,32,230,231,232,228,229,226,227,222,223,225,224,,,321,357,,,,,37',
'15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,46,,39,40,',
',41,285,,,,,,,,,,,,,44,32,,,,,,,48,,,,11,,,45,,,,,,37,15,16,17,18,19',
'20,21,22,23,24,25,26,27,28,29,33,34,35,36,46,,39,40,,,41,,,,,,,,,,,',
',,44,32,,,,,,,48,,,,11,,,45,,,,,,37,15,16,17,18,19,20,21,22,23,24,25',
'26,27,28,29,33,34,35,36,46,,39,40,,,41,,,,,,,,,,,,,,44,32,,,,,,,48,',
',,11,,,45,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34',
'35,36,32,,39,40,,,41,48,,,,160,,,,,,,,,37,,,,,,,21,22,23,24,25,26,27',
'28,29,33,34,35,36,32,,39,40,,,41,48,,,,160,,,,,,,,,37,,,,,,,21,22,23',
'24,25,26,27,28,29,33,34,35,36,32,259,39,40,,,41,48,,,,160,,,,,,,,,37',
',,,,,,21,22,23,24,25,26,27,28,29,33,34,35,36,32,,39,40,,,41,48,,,,160',
',,,,,,,,37,,,,,,,21,22,23,24,25,26,27,28,29,33,34,35,36,32,,39,40,,',
'41,,,,,11,,,,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33',
'34,35,36,59,32,39,40,,,41,,,52,,,11,,,,,,,,,37,15,16,17,18,19,20,21',
'22,23,24,25,26,27,28,29,33,34,35,36,59,32,39,40,147,,41,,,,,,11,,,,',
',,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,59,32',
'39,40,,,41,,,,87,,,,,,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27',
'28,29,33,34,35,36,32,,39,40,,,41,48,,,,160,,,,,,,,,37,,,,,,,21,22,23',
'24,25,26,27,28,29,33,34,35,36,32,340,39,40,,,41,48,,,,160,,,,,,,,,37',
',,,,,,21,22,23,24,25,26,27,28,29,33,34,35,36,32,424,39,40,,,41,,,,,11',
',,,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36',
'59,32,39,40,,,41,,,,,,,,,,,,,,,37,15,16,17,18,19,20,21,22,23,24,25,26',
'27,28,29,33,34,35,36,,,39,40,,,41' ]
        racc_action_table = arr = ::Array.new(4366, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'457,233,300,457,457,82,41,41,164,38,38,145,80,457,178,320,270,265,158',
'45,457,267,457,457,457,457,457,457,457,42,300,331,164,457,178,457,233',
'265,158,45,270,267,145,163,280,80,82,41,320,178,38,163,265,158,45,331',
'267,154,124,280,167,457,42,82,82,82,342,355,324,233,167,457,457,457',
'457,457,457,457,457,457,457,457,178,265,158,450,342,267,450,450,46,124',
'280,457,457,457,457,457,450,324,355,342,284,9,152,450,256,450,450,450',
'450,450,450,450,43,339,124,124,450,341,450,124,124,9,152,256,256,256',
'291,43,291,46,342,272,57,284,9,9,9,152,9,272,434,77,434,81,450,282,46',
'46,46,77,282,90,57,282,450,450,450,450,450,450,450,450,450,450,450,57',
'57,57,183,57,413,183,183,239,239,413,450,450,450,450,450,183,201,336',
'292,382,292,201,183,278,183,183,183,183,183,183,183,278,315,315,315',
'183,371,183,382,382,382,371,335,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,183,183,278,278,62,62,278',
'257,62,278,183,183,183,183,183,183,183,183,183,183,183,104,238,238,449',
'296,104,449,449,451,296,451,183,183,183,183,183,449,347,314,314,314',
'351,347,449,352,449,449,449,449,449,449,449,261,352,345,100,449,261',
'449,345,436,422,436,422,352,352,352,352,352,352,352,352,352,352,352',
'352,352,352,352,352,352,352,352,352,449,354,352,352,151,151,352,102',
'151,352,449,449,449,449,449,449,449,449,449,449,449,63,63,356,185,63',
'63,185,185,410,358,410,449,449,449,449,449,185,161,313,313,313,313,313',
'185,359,185,185,185,185,185,185,185,333,408,333,408,185,161,185,312',
'312,312,312,312,161,161,161,161,161,161,161,161,161,161,161,161,161',
'360,176,161,161,176,176,161,185,310,310,310,310,310,310,310,235,330',
'185,185,185,185,185,185,185,185,185,185,185,326,364,326,447,108,109',
'447,447,234,54,234,185,185,185,185,185,447,160,293,452,293,452,51,447',
'49,447,447,447,447,447,447,447,110,47,112,113,447,160,447,114,381,115',
'383,384,160,160,160,160,160,160,160,160,160,160,160,160,160,385,387',
'160,160,120,393,160,447,308,308,308,308,308,308,308,394,137,447,447',
'447,447,447,447,447,447,447,447,447,399,401,403,437,405,263,437,437',
'65,66,153,447,447,447,447,447,437,337,197,420,421,266,424,437,425,437',
'437,437,437,437,437,435,195,430,435,435,186,166,437,437,159,273,279',
'76,435,175,438,441,170,159,4,435,1,435,435,435,435,435,435,435,159,72',
'294,168,435,,435,159,159,159,159,159,159,159,159,159,159,159,159,159',
',,159,159,,,159,,,,,,435,,,,437,437,437,437,437,,435,435,435,435,435',
'435,435,435,435,435,435,,,,433,,,433,433,,,,435,435,435,435,435,433',
',,14,,,,433,,433,433,433,433,433,433,433,,,,,433,,433,14,14,14,14,14',
'14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,,14,14,,433,14,311,311',
'311,311,311,311,311,,433,433,433,433,433,433,433,433,433,433,433,,,',
'432,,,432,432,,,,433,433,433,433,433,432,162,,,,,,432,,432,432,432,432',
'432,432,432,,,,,432,162,432,,,,,,162,162,162,162,162,162,162,162,162',
'162,162,162,162,,,162,162,,,162,432,309,309,309,309,309,309,309,,,432',
'432,432,432,432,432,432,432,432,432,432,,,,429,,,429,429,,,,432,432',
'432,432,432,429,,,13,,,,429,,429,429,429,429,429,429,429,,,,,429,,429',
'13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,,,13,13',
',429,13,,,,,,,,,429,429,429,429,429,429,429,429,429,429,429,,,,412,',
',412,412,,,,429,429,429,429,429,412,,,,,,,412,,412,412,412,412,412,412',
'411,,,411,411,,,412,412,,,,,411,,,,,,,411,,411,411,411,411,411,411,409',
',,409,409,,,411,411,,,,,409,,,,,,,409,,409,409,409,409,409,409,409,119',
',,,409,,409,,412,412,412,412,412,,,,,119,119,119,119,119,119,119,119',
'119,119,,,,,,409,,,,411,411,411,411,411,,409,409,409,409,409,409,409',
'409,409,409,409,,,,380,,,380,380,,,,409,409,409,409,409,380,,,,,,,380',
',380,380,380,380,380,380,377,,,377,377,,,380,,,,,,377,,,,,,,377,,377',
'377,377,377,377,377,373,,,373,373,380,380,377,,,,,,373,,,,,,,373,,373',
'373,373,373,373,373,,372,,,372,372,,373,,380,380,380,380,380,372,,,',
',,,372,,372,372,372,372,372,372,,,,,,372,,372,377,377,377,377,377,,',
',,,,,,370,,,370,370,,,,,,,,,370,,373,373,373,373,373,370,,370,370,370',
'370,370,370,,369,,,369,369,,370,370,,,,,,369,,372,372,372,372,372,369',
',369,369,369,369,369,369,368,,,368,368,,,369,,,,,,368,,,,,,,368,,368',
'368,368,368,368,368,368,,,,,368,,368,370,370,370,370,370,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,,,368,,',
',369,369,369,369,369,,368,368,368,368,368,368,368,368,368,368,368,,',
',367,,,367,367,,,,368,368,368,368,368,367,,,79,,,,367,,367,367,367,367',
'367,367,367,,,79,,367,,367,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
'79,79,79,79,79,79,,,79,79,,367,79,,,,,,,,,367,367,367,367,367,367,367',
'367,367,367,367,,,,366,,,366,366,,,,367,367,367,367,367,366,,,362,,',
',366,,366,366,366,366,366,366,366,,,362,,366,,366,362,362,362,362,362',
'362,362,362,362,362,362,362,362,362,362,362,362,362,362,362,,,362,362',
',366,362,,,,,,,,,366,366,366,366,366,366,366,366,366,366,366,,,,59,',
',59,59,,,,366,366,366,366,366,59,,,,,,,59,59,59,59,59,59,59,59,59,,',
',59,59,,59,,,,,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59',
'59,59,59,59,59,59,,,59,,,,59,59,59,59,59,59,59,59,59,59,59,,,,361,,',
'361,361,,,,59,59,59,59,59,361,,,,,,,361,,361,361,361,361,361,361,187',
',,187,187,,,361,,,,,,187,,,,,,,187,,187,187,187,187,187,187,187,,,,',
'187,,187,,,,,,361,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,301,,,187,,,,361,361,361,361,361,,187,187,187,187,187,187',
'187,187,187,187,187,,,,343,,,343,343,,,,187,187,187,187,187,343,,,,',
',,343,,343,343,343,343,343,343,323,,,323,323,,,343,,,,,,323,,,,,,,323',
',323,323,323,323,323,323,189,,,189,189,,,323,,,,,,189,,,,,,,189,,189',
'189,189,189,189,189,,295,,,295,295,,189,,343,343,343,343,343,295,,,',
',,,295,,295,295,295,295,295,295,288,,,288,288,295,,295,323,323,323,323',
'323,288,,,,,,,288,,288,288,288,288,288,288,288,,,,,288,,288,189,189',
'189,189,189,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
'302,302,,,,,288,,,,295,295,295,295,295,,288,288,288,288,288,288,288',
'288,288,288,288,,,,285,,,285,285,,,,288,288,288,288,288,285,,,,,,,285',
',285,285,285,285,285,285,192,,,192,192,,,285,,,,,,192,,,,,,,192,,192',
'192,192,192,192,192,,78,,,78,78,,192,,,,,,285,78,,,,,,,78,,78,78,78',
'78,78,78,275,,,275,275,,,78,285,285,285,285,285,275,,,,,,,275,,275,275',
'275,275,275,275,,264,,,264,264,,275,192,192,192,192,192,78,264,,,,,',
',264,,264,264,264,264,264,264,253,,,253,253,,,264,78,78,78,78,78,253',
',,,,,,253,,253,253,253,253,253,253,,,,,,,,253,275,275,275,275,275,,',
',,,,,,,247,,,247,247,,,,,,,253,,247,,264,264,264,264,264,247,247,247',
'247,247,247,247,247,,,,,,,,247,,,,,,247,,253,253,253,253,253,247,247',
'247,247,247,247,247,247,247,247,247,247,247,,,247,247,243,,247,243,243',
',,,,,,,,243,,,11,,,,243,,243,243,243,243,243,243,247,247,247,247,247',
',,243,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,91',
'11,11,91,91,11,,,,,,,,91,,,,,,,91,91,91,91,91,91,91,91,91,,,,91,91,',
'91,243,243,243,243,243,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,,,91,,,,91,91,91,91,91,91,91,91,91,91,91',
',,,93,,,93,93,,,,91,91,91,91,91,93,,,,,,,93,,93,93,93,93,93,93,237,',
'93,237,237,93,,93,,,,,,237,,,,,,,237,,237,237,237,237,237,237,,,,,,93',
',237,237,,,,,,,93,93,93,93,93,93,93,93,93,93,93,,,,101,,,101,101,,,',
'93,93,93,93,93,101,,,,,,,101,,101,101,101,101,101,101,236,,,236,236',
',,101,237,237,237,237,237,236,,,,,,,236,,236,236,236,236,236,236,193',
',,193,193,,,236,,,,,,193,,,,,,,193,,193,193,193,193,193,193,,106,,,106',
'106,,193,,101,101,101,101,101,106,,,,,,,106,,106,106,106,106,106,106',
'106,,,,,106,,106,236,236,236,236,236,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,,,,,,106,106,,193,193,193,193,193,,,106',
'106,106,106,106,106,106,106,106,106,106,,,,232,,,232,232,,,,106,106',
'106,106,106,232,,,,,,,232,,232,232,232,232,232,232,231,,,231,231,,,232',
',,,,,231,,,,,,,231,,231,231,231,231,231,231,230,,,230,230,,,231,,,,',
',230,,,,,,,230,,230,230,230,230,230,230,,111,,,111,111,,230,,232,232',
'232,232,232,111,,,,,,,111,,111,111,111,111,111,111,111,,,,,111,,111',
'231,231,231,231,231,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,,,,,,,111,,,230,230,230,230,230,,,111,111,111,111,111,111,111',
'111,111,111,111,,,,229,,,229,229,,,,111,111,111,111,111,229,,,,,,,229',
',229,229,229,229,229,229,228,,,228,228,,,229,,,,,,228,,,,,,,228,,228',
'228,228,228,228,228,227,,,227,227,,,228,,,,,,227,,,,,,,227,,227,227',
'227,227,227,227,,226,,,226,226,,227,,229,229,229,229,229,226,,,,,,,226',
',226,226,226,226,226,226,116,,,116,116,,,226,228,228,228,228,228,116',
',,,,,,116,,116,116,116,116,116,116,225,,,225,225,116,,116,227,227,227',
'227,227,225,,,,,,,225,,225,225,225,225,225,225,,224,,,224,224,,225,',
'226,226,226,226,226,224,,,,,,,224,,224,224,224,224,224,224,223,,,223',
'223,,,224,116,116,116,116,116,223,,,,,,,223,,223,223,223,223,223,223',
',,,,,,,223,225,225,225,225,225,,,,,,,,,,123,,,123,123,,,,,,,,,123,,224',
'224,224,224,224,123,123,123,123,123,123,123,123,,,,,,,,123,,,,,,123',
',223,223,223,223,223,123,123,123,123,123,123,123,123,123,123,123,123',
'123,,,123,123,222,,123,222,222,,,,,,,,,222,,,,,,,222,,222,222,222,222',
'222,222,123,123,123,123,123,125,,222,125,125,,,,,,,,,125,,,,,,,125,',
'125,125,125,125,125,125,,,194,,,194,194,125,,,,,,,,194,,,,,,,194,,194',
'194,194,194,194,194,,,222,222,222,222,222,194,307,307,307,307,307,307',
'307,307,307,307,307,,127,,,127,127,,,,,,,,,127,,125,125,125,125,125',
'127,,127,127,127,127,127,127,,,128,,,128,128,127,,,,,,,,128,,194,194',
'194,194,194,128,,128,128,128,128,128,128,,,,,,221,,128,221,221,,,,,',
',,,221,,,,,,,221,,221,221,221,221,221,221,,,127,127,127,127,127,221',
',,,,,,,,,220,,,220,220,,,,,,,,,220,,128,128,128,128,128,220,,220,220',
'220,220,220,220,,,,,,219,,220,219,219,,,,,,,,,219,,221,221,221,221,221',
'219,,219,219,219,219,219,219,,,147,,,147,147,219,,,,,,,,147,,,,,,,147',
',147,147,147,147,147,147,,,220,220,220,220,220,147,305,305,305,305,305',
'305,305,305,305,305,305,305,305,218,,,218,218,,,,,,,,147,218,219,219',
'219,219,219,,218,,218,218,218,218,218,218,,217,,,217,217,,218,,,,,,',
'217,,147,147,147,147,147,217,,217,217,217,217,217,217,216,,,216,216',
',,217,,,,,,216,,,,,,,216,,216,216,216,216,216,216,215,,,215,215,,,216',
'218,218,218,218,218,215,,,,,,,215,,215,215,215,215,215,215,,214,,,214',
'214,,215,,217,217,217,217,217,214,,,,,,,214,,214,214,214,214,214,214',
'202,,,202,202,,,214,216,216,216,216,216,202,,,,,,,202,,202,202,202,202',
'202,202,196,,,196,196,,,202,215,215,215,215,215,196,,,,,,,196,,196,196',
'196,196,196,196,,,,,,196,,196,,214,214,214,214,214,,,,,,,,,126,,,126',
'126,,,,,,,,,126,,202,202,202,202,202,126,281,126,126,126,126,126,126',
',,,,,,,126,,,,,,281,281,196,196,196,196,196,,,,,,,,,281,281,,,,,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,321,,281,281,,,281,281,,,,126,126,126,126,126,,,,,,321,306,306',
'306,306,306,306,306,306,306,306,306,,,321,321,,,,,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,5,,321,321',
',,321,321,,,,,,,,,,,,,5,5,,,,,,,5,,,,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5',
'5,5,5,5,5,5,5,5,5,5,2,,5,5,,,5,,,,,,,,,,,,,,2,2,,,,,,,2,,,,2,,,2,,,',
',,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,,2,2,,,2,,,,,,,,,,,,,,0',
'0,,,,,,,0,,,,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,',
'0,0,,,0,73,,,,73,,,,,,,,,73,,,,,,,73,73,73,73,73,73,73,73,73,73,73,73',
'73,156,,73,73,,,73,156,,,,156,,,,,,,,,156,,,,,,,156,156,156,156,156',
'156,156,156,156,156,156,156,156,155,156,156,156,,,156,155,,,,155,,,',
',,,,,155,,,,,,,155,155,155,155,155,155,155,155,155,155,155,155,155,346',
',155,155,,,155,346,,,,346,,,,,,,,,346,,,,,,,346,346,346,346,346,346',
'346,346,346,346,346,346,346,56,,346,346,,,346,,,,,56,,,,,,,,,56,56,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,60,56,56,,,56',
',,60,,,60,,,,,,,,,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60',
'60,60,60,60,146,60,60,60,,60,,,,,,146,,,,,,,,,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,396,146',
'146,,,146,,,,396,,,,,,,,,,,396,396,396,396,396,396,396,396,396,396,396',
'396,396,396,396,396,396,396,396,396,258,,396,396,,,396,258,,,,258,,',
',,,,,,258,,,,,,,258,258,258,258,258,258,258,258,258,258,258,258,258',
'391,258,258,258,,,258,391,,,,391,,,,,,,,,391,,,,,,,391,391,391,391,391',
'391,391,391,391,391,391,391,391,8,391,391,391,,,391,,,,,8,,,,,,,,,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,12,8,8,,,8,,,,,,,,,,,,,,,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,12' ]
        racc_action_check = arr = ::Array.new(4366, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3811,   559,  3750,   nil,   525,  3689,   nil,   nil,  4254,   100,
   nil,  2110,  4295,   785,   615,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -14,   nil,
   nil,   -17,    -9,    91,   nil,    16,    87,   422,   nil,   446,
   nil,   411,   nil,   nil,   398,   nil,  4011,   131,   nil,  1462,
  4052,   nil,   199,   301,   nil,   477,   478,   nil,   nil,   nil,
   nil,   nil,   504,  3851,   nil,   nil,   486,   120,  1915,  1287,
   -26,   106,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    85,  2172,   nil,  2257,   nil,   nil,   nil,   nil,   nil,   nil,
   218,  2342,   254,   nil,   216,   nil,  2427,   nil,   388,   389,
   416,  2597,   418,   434,   425,   427,  2795,   nil,   nil,   895,
   388,  1248,   nil,  2930,    20,  3028,  3546,  3106,  3136,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   470,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -22,  4093,  3277,   nil,   nil,
   nil,   284,   101,   479,    32,  3931,  3891,   nil,    15,   523,
   415,   330,   698,    20,   -33,   nil,   512,    37,   502,   nil,
   483,   nil,   nil,   nil,   nil,   513,   358,   nil,    11,   nil,
   nil,   nil,   nil,   167,   nil,   337,   474,  1575,   nil,  1716,
   nil,   nil,  1886,  2398,  3058,   461,  3496,   489,   nil,   nil,
   nil,   148,  3468,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  3440,  3411,  3383,  3355,  3326,  3247,
  3214,  3169,  2995,  2880,  2852,  2823,  2767,  2738,  2710,  2682,
  2568,  2540,  2512,    -2,   391,   370,  2370,  2285,   230,   152,
   nil,   nil,   nil,  2115,   nil,   nil,   nil,  2050,   nil,   nil,
   nil,   nil,   nil,  2000,   nil,   nil,    83,   213,  4174,   nil,
   nil,   248,   nil,   443,  1972,    14,   464,    18,   nil,   nil,
   -25,   nil,   110,   515,   nil,  1943,   nil,   nil,   167,   508,
    21,  3567,   115,   nil,    64,  1858,   nil,   nil,  1773,   nil,
   nil,    89,   147,   401,   531,  1745,   220,   nil,   nil,   nil,
   -39,  1617,  1814,  2468,  2638,  3313,  3650,  3094,   484,   767,
   399,   683,   373,   352,   267,   197,   nil,   nil,   nil,   nil,
   -23,  3628,   nil,  1688,    27,   nil,   383,   nil,   nil,   nil,
   371,   -10,   nil,   330,   nil,   172,   147,   486,   nil,    76,
   nil,    87,    63,  1660,   nil,   250,  3971,   233,   nil,   nil,
   nil,   241,   252,   nil,   285,    29,   300,   nil,   307,   329,
   361,  1547,  1372,   nil,   351,   nil,  1377,  1292,  1207,  1179,
  1150,   168,  1101,  1072,   nil,   nil,   nil,  1044,   nil,   nil,
  1016,   423,   164,   441,   442,   453,   nil,   447,   nil,   nil,
   nil,  4214,   nil,   451,   462,   nil,  4134,   nil,   nil,   474,
   nil,   436,   nil,   470,   nil,   490,   nil,   nil,   331,   931,
   306,   903,   875,   136,   nil,   nil,   nil,   nil,   nil,   nil,
   485,   488,   254,   nil,   493,   498,   nil,   nil,   nil,   790,
   504,   nil,   705,   620,   103,   535,   253,   507,   527,   nil,
   nil,   528,   nil,   nil,   nil,   nil,   nil,   422,   nil,   252,
    82,   221,   402,   nil,   nil,   nil,   nil,    -3,   nil,   nil ]

racc_action_default = [
    -1,  -265,    -2,    -3,    -5,  -265,    -8,    -9,  -265,  -265,
   -15,  -265,   -36,   -38,   -40,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,
   -57,   -58,   -59,   -60,   -61,   -62,   -63,   -64,  -265,   -68,
   -69,  -265,  -100,  -265,  -102,  -265,  -108,  -259,  -261,  -265,
    -4,    -7,  -263,    -6,  -260,   -10,  -265,  -265,   -34,  -265,
   -74,   -17,  -265,  -265,   -21,  -265,  -265,   -72,   -16,   -37,
   -39,   -41,   -65,  -265,  -257,  -258,   -90,  -265,  -265,  -265,
  -101,  -265,  -109,  -110,  -112,  -262,   460,  -264,   -13,   -35,
   -74,  -265,  -147,  -265,  -149,  -150,  -151,  -152,  -153,  -154,
  -244,  -265,  -265,  -158,  -265,  -160,  -265,  -164,  -265,  -265,
  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -184,  -186,  -222,
  -199,  -202,  -221,  -265,  -224,  -265,  -265,  -265,  -265,  -230,
  -231,  -232,  -233,  -234,  -235,  -236,  -245,  -246,  -248,  -252,
  -253,  -254,  -255,  -256,   -11,  -265,  -265,  -265,   -18,   -22,
   -19,  -265,  -265,  -265,  -265,  -265,  -265,   -70,  -265,  -265,
  -265,   -81,   -83,  -265,  -265,   -93,   -95,  -265,   -98,  -104,
  -265,  -201,  -222,  -244,  -106,  -265,  -114,  -118,  -126,  -103,
  -111,  -113,  -161,  -265,  -148,  -265,  -265,  -265,  -159,  -265,
  -162,  -165,  -265,  -265,  -265,  -265,  -265,  -265,  -180,  -181,
  -182,  -265,  -265,  -188,  -189,  -190,  -191,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -265,  -265,  -265,  -265,  -265,  -265,
  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,  -265,
  -265,  -265,  -265,  -134,  -265,  -265,  -265,  -265,  -265,  -265,
  -242,  -243,  -225,  -265,  -226,  -227,  -228,  -265,  -249,   -12,
   -14,   -75,  -128,  -265,   -20,   -73,  -265,  -265,  -265,   -66,
   -71,  -265,   -85,   -87,  -265,  -265,   -69,  -265,   -82,   -84,
  -265,   -91,  -265,   -97,   -96,  -265,  -105,  -107,  -265,  -265,
  -135,  -265,  -122,  -127,  -136,  -265,  -163,  -155,  -265,  -157,
  -185,  -265,  -265,  -265,  -265,  -265,  -265,  -179,  -183,  -187,
  -265,  -203,  -204,  -205,  -206,  -207,  -208,  -209,  -210,  -211,
  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -133,
  -135,  -265,  -247,  -265,  -265,  -238,  -265,  -250,  -240,  -241,
  -265,  -265,  -131,  -265,   -25,   -27,  -265,  -265,   -30,  -265,
   -67,   -76,  -265,  -265,   -89,  -265,  -265,  -265,   -92,   -94,
   -99,  -115,  -265,  -119,  -265,  -137,  -265,  -143,  -265,  -123,
  -124,  -265,  -265,  -139,  -265,  -156,  -265,  -265,  -265,  -265,
  -265,  -265,  -265,  -265,  -223,  -237,  -239,  -265,  -229,  -129,
  -265,  -265,  -265,  -265,  -265,  -265,   -24,   -78,   -86,   -88,
   -77,  -265,   -79,  -116,  -265,  -120,  -265,  -138,  -144,  -125,
  -141,  -265,  -145,  -265,  -140,  -166,  -168,  -169,  -265,  -265,
  -265,  -265,  -265,  -265,  -200,  -251,  -130,  -132,   -23,   -26,
  -265,  -265,  -265,   -32,  -265,  -117,  -121,  -142,  -146,  -265,
  -265,  -171,  -265,  -265,  -265,  -265,  -265,  -265,  -265,   -28,
   -29,  -265,   -80,  -167,  -170,  -172,  -173,  -265,  -175,  -265,
  -265,  -265,  -265,   -33,  -174,  -176,  -177,  -265,   -31,  -178 ]

racc_goto_table = [
     9,    47,     9,    47,    84,     9,    54,    80,    51,   175,
   191,   156,    69,    70,    71,   195,     8,   251,     8,    83,
   260,     8,   161,   201,   235,    60,   149,   334,    55,   261,
   234,   162,   422,   283,   106,   355,     1,     3,    72,    50,
   181,    76,   164,   274,   245,   331,    58,   349,   388,    82,
   184,   255,   333,   353,   151,   180,    68,   202,    53,   170,
     2,    81,   326,   nil,   145,   nil,   183,   nil,   nil,   nil,
   nil,   nil,   161,    90,   159,   355,    88,   nil,   167,   178,
   144,   162,   186,   172,   252,   452,   nil,   191,   319,   287,
    56,   289,   nil,   258,    89,   nil,   nil,    58,    58,   291,
   292,   293,   171,   296,   161,   161,   172,   nil,   161,   161,
   161,   161,   nil,   162,   162,   149,   nil,   162,   162,   162,
   162,   300,   260,   332,   233,   171,   290,   395,   270,    89,
   242,   244,   172,   246,   nil,   nil,   345,   nil,   347,   299,
   279,    91,   146,   324,   nil,   nil,   nil,   nil,   330,   nil,
   234,   280,   nil,   419,   234,   nil,   159,   159,   nil,   nil,
   265,   267,   268,   269,   167,   249,   250,   nil,    90,   nil,
   273,   426,   nil,   nil,   327,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    89,   nil,   nil,   nil,   nil,   nil,
   252,   nil,   365,   nil,   282,   nil,   161,   nil,   nil,   nil,
   nil,   nil,   371,   nil,   nil,   162,   320,   161,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   162,   nil,   nil,   nil,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   328,   329,
   374,   nil,   nil,   nil,    80,   344,   359,   nil,   233,   nil,
   417,   nil,   nil,   nil,   280,   260,   350,   nil,   nil,   159,
   nil,   nil,   nil,   nil,   nil,   nil,   364,   nil,   nil,   172,
   405,   406,   407,   167,   nil,   nil,   408,   410,   178,   413,
   172,   178,   352,   nil,   391,   nil,   360,   nil,   171,   nil,
   172,   nil,   403,   nil,   320,   161,   nil,    81,   nil,   171,
   nil,   nil,   nil,   nil,   162,   nil,   nil,   nil,   nil,   171,
   nil,   nil,   nil,   431,   415,   nil,   nil,   252,   434,   436,
   nil,   178,   nil,   nil,   389,   nil,   nil,   nil,   172,   nil,
   nil,   nil,   nil,   443,   nil,   nil,   445,   446,   nil,   448,
   161,   nil,   401,   nil,   451,   387,   nil,   159,   172,   162,
   nil,   454,   178,   455,   456,   393,   nil,   nil,   396,   nil,
   nil,   459,   178,   399,   nil,   nil,   172,   171,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   172,   nil,
   nil,   nil,   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,
   nil,   nil,   159,   nil,   nil,   nil,   178,   414,   425,   301,
   302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318 ]

racc_goto_check = [
    11,    33,    11,    33,    22,    11,    33,    39,     6,    41,
    50,    27,    11,    11,    11,    50,     9,    30,     9,    40,
    28,     9,    21,    57,    48,     9,    16,    18,    10,    32,
    57,    22,    19,    45,    58,    49,     1,     3,    26,     3,
    22,    26,    36,    38,    64,    47,     8,    37,    34,    42,
    51,    29,    17,    44,    14,    40,    13,    61,     4,    35,
     2,     9,    68,   nil,     6,   nil,    58,   nil,   nil,   nil,
   nil,   nil,    21,     9,    33,    49,    10,   nil,    33,    11,
    10,    22,    35,    60,    46,    19,   nil,    50,    45,    50,
    12,    50,   nil,    27,     8,   nil,   nil,     8,     8,    57,
    57,    57,    59,    57,    21,    21,    60,   nil,    21,    21,
    21,    21,   nil,    22,    22,    16,   nil,    22,    22,    22,
    22,    57,    28,    30,    31,    59,    46,    44,    36,     8,
    60,    60,    60,    60,   nil,   nil,    32,   nil,    32,    46,
    16,    12,    12,    57,   nil,   nil,   nil,   nil,    48,   nil,
    57,    40,   nil,    18,    57,   nil,    33,    33,   nil,   nil,
    31,    31,    31,    31,    33,    10,    10,   nil,     9,   nil,
     6,    44,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,
    46,   nil,    50,   nil,     9,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    57,   nil,   nil,    22,    40,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    26,    26,
    64,   nil,   nil,   nil,    39,    35,    16,   nil,    31,   nil,
    30,   nil,   nil,   nil,    40,    28,    35,   nil,   nil,    33,
   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,   nil,    60,
    50,    50,    50,    33,   nil,   nil,    57,    57,    11,    57,
    60,    11,     6,   nil,    27,   nil,     6,   nil,    59,   nil,
    60,   nil,    41,   nil,    40,    21,   nil,     9,   nil,    59,
   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,    59,
   nil,   nil,   nil,    50,    46,   nil,   nil,    46,    57,    57,
   nil,    11,   nil,   nil,    35,   nil,   nil,   nil,    60,   nil,
   nil,   nil,   nil,    50,   nil,   nil,    50,    50,   nil,    50,
    21,   nil,    35,   nil,    57,     6,   nil,    33,    60,    22,
   nil,    50,    11,    50,    50,     6,   nil,   nil,     6,   nil,
   nil,    50,    11,     6,   nil,   nil,    60,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,
   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,    11,    59,     6,    63,
    63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
    63,    63,    63,    63,    63,    63,    63 ]

racc_goto_pointer = [
   nil,    36,    60,    37,    53,   nil,     4,   nil,    38,    16,
    20,     0,    82,    45,    -9,   nil,   -36,  -204,  -229,  -353,
   nil,   -51,   -42,   nil,   nil,   nil,     0,   -62,  -136,  -101,
  -130,     1,  -129,     1,  -294,   -19,   -35,  -225,  -124,   -36,
   -27,   -70,     3,   nil,  -225,  -145,   -63,  -208,   -99,  -245,
   -96,   -43,   nil,   nil,   nil,   nil,   nil,   -93,   -25,    24,
     5,   -62,   nil,   184,   -83,   nil,   nil,   nil,  -175,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,   nil,     6,     7,   263,
    96,    57,   nil,    10,    62,    63,    64,   nil,   nil,   nil,
    12,    13,    14,    30,    31,    38,   nil,   nil,   157,    67,
   nil,   158,   nil,    93,   262,   nil,   nil,   165,   166,    42,
    43,   358,   nil,   176,   177,   356,   117,   nil,   nil,   284,
   107,    92,    94,    95,    97,    98,    99,   104,   nil,   118,
   119,   nil,   120,   121,   122,   124,   127,   135,   nil,   136,
   137 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 105, :_reduce_3,
  2, 105, :_reduce_4,
  1, 106, :_reduce_none,
  2, 106, :_reduce_6,
  2, 106, :_reduce_7,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  2, 110, :_reduce_10,
  3, 110, :_reduce_11,
  4, 110, :_reduce_12,
  3, 110, :_reduce_13,
  4, 110, :_reduce_14,
  1, 111, :_reduce_none,
  2, 111, :_reduce_16,
  2, 116, :_reduce_17,
  3, 116, :_reduce_18,
  3, 116, :_reduce_19,
  4, 116, :_reduce_20,
  1, 117, :_reduce_none,
  2, 117, :_reduce_none,
  6, 119, :_reduce_none,
  5, 119, :_reduce_none,
  1, 120, :_reduce_none,
  3, 120, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_none,
  4, 121, :_reduce_none,
  1, 121, :_reduce_none,
  6, 121, :_reduce_none,
  1, 122, :_reduce_none,
  3, 122, :_reduce_none,
  1, 115, :_reduce_none,
  2, 115, :_reduce_none,
  1, 114, :_reduce_36,
  2, 114, :_reduce_37,
  1, 114, :_reduce_38,
  2, 114, :_reduce_39,
  1, 114, :_reduce_40,
  2, 114, :_reduce_41,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  2, 126, :_reduce_none,
  4, 126, :_reduce_none,
  5, 126, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 130, :_reduce_none,
  2, 130, :_reduce_none,
  1, 118, :_reduce_72,
  3, 118, :_reduce_73,
  1, 132, :_reduce_74,
  3, 132, :_reduce_75,
  3, 131, :_reduce_none,
  4, 131, :_reduce_none,
  4, 131, :_reduce_none,
  4, 131, :_reduce_none,
  6, 131, :_reduce_none,
  1, 134, :_reduce_none,
  2, 134, :_reduce_none,
  1, 134, :_reduce_none,
  2, 134, :_reduce_none,
  1, 135, :_reduce_none,
  3, 135, :_reduce_none,
  1, 137, :_reduce_none,
  3, 137, :_reduce_none,
  2, 137, :_reduce_none,
  2, 127, :_reduce_none,
  4, 127, :_reduce_none,
  5, 127, :_reduce_none,
  1, 139, :_reduce_none,
  3, 139, :_reduce_none,
  1, 140, :_reduce_none,
  2, 140, :_reduce_none,
  2, 140, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_none,
  1, 112, :_reduce_none,
  2, 112, :_reduce_101,
  1, 142, :_reduce_102,
  3, 142, :_reduce_103,
  3, 142, :_reduce_104,
  4, 142, :_reduce_105,
  3, 142, :_reduce_106,
  4, 142, :_reduce_107,
  1, 143, :_reduce_108,
  2, 143, :_reduce_109,
  2, 143, :_reduce_110,
  3, 143, :_reduce_111,
  1, 145, :_reduce_112,
  2, 145, :_reduce_113,
  1, 144, :_reduce_none,
  3, 144, :_reduce_115,
  4, 144, :_reduce_116,
  5, 144, :_reduce_117,
  1, 146, :_reduce_118,
  3, 146, :_reduce_119,
  4, 146, :_reduce_120,
  5, 146, :_reduce_121,
  2, 147, :_reduce_122,
  3, 147, :_reduce_123,
  3, 147, :_reduce_124,
  4, 147, :_reduce_125,
  1, 147, :_reduce_none,
  2, 147, :_reduce_127,
  1, 133, :_reduce_none,
  3, 133, :_reduce_none,
  4, 133, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_none,
  2, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  3, 152, :_reduce_none,
  2, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  4, 152, :_reduce_none,
  2, 152, :_reduce_none,
  3, 152, :_reduce_none,
  3, 152, :_reduce_none,
  4, 152, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  3, 155, :_reduce_none,
  4, 155, :_reduce_none,
  3, 155, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_none,
  2, 113, :_reduce_none,
  3, 113, :_reduce_none,
  3, 113, :_reduce_none,
  4, 113, :_reduce_none,
  1, 161, :_reduce_none,
  2, 161, :_reduce_none,
  5, 157, :_reduce_none,
  7, 157, :_reduce_none,
  5, 157, :_reduce_none,
  5, 158, :_reduce_none,
  7, 158, :_reduce_none,
  6, 158, :_reduce_none,
  7, 158, :_reduce_none,
  7, 158, :_reduce_none,
  8, 158, :_reduce_none,
  7, 158, :_reduce_none,
  8, 158, :_reduce_none,
  8, 158, :_reduce_none,
  9, 158, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  2, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 162, :_reduce_none,
  5, 162, :_reduce_none,
  1, 138, :_reduce_none,
  1, 165, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  3, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  4, 167, :_reduce_none,
  1, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  2, 163, :_reduce_none,
  4, 163, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 168, :_reduce_none,
  4, 168, :_reduce_237,
  3, 168, :_reduce_none,
  4, 168, :_reduce_none,
  3, 168, :_reduce_none,
  3, 168, :_reduce_none,
  2, 168, :_reduce_none,
  2, 168, :_reduce_none,
  1, 170, :_reduce_244,
  1, 170, :_reduce_245,
  1, 170, :_reduce_none,
  3, 170, :_reduce_247,
  1, 173, :_reduce_248,
  2, 173, :_reduce_249,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 172, :_reduce_256,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 108, :_reduce_none,
  2, 108, :_reduce_260,
  1, 136, :_reduce_261,
  2, 136, :_reduce_262,
  1, 109, :_reduce_263,
  2, 109, :_reduce_264 ]

racc_reduce_n = 265

racc_shift_n = 460

racc_token_table = {
  false => 0,
  :error => 1,
  :UNARY => 2,
  "*" => 3,
  "/" => 4,
  "%" => 5,
  "+" => 6,
  "-" => 7,
  "<<" => 8,
  ">>" => 9,
  "<" => 10,
  ">" => 11,
  ">=" => 12,
  "<=" => 13,
  "==" => 14,
  "!=" => 15,
  "&" => 16,
  "^" => 17,
  "|" => 18,
  "&&" => 19,
  "||" => 20,
  "else" => 21,
  :WITHOUT_ELSE => 22,
  :IDENTIFIER => 23,
  :TYPEDEF_NAME => 24,
  :STRING => 25,
  :INTEGER => 26,
  :FLOAT => 27,
  :CHARACTER => 28,
  :ENUM_CONSTANT => 29,
  :BadToken => 30,
  :PreMarkupLeader => 31,
  :PostMarkupLeader => 32,
  :COMMENT => 33,
  :LexBug => 34,
  "__extension__" => 35,
  ";" => 36,
  "__attribute__" => 37,
  "(" => 38,
  ")" => 39,
  "__asm__" => 40,
  "," => 41,
  "__mode__" => 42,
  "__nonnull__" => 43,
  "__const" => 44,
  "auto" => 45,
  "register" => 46,
  "static" => 47,
  "extern" => 48,
  "typedef" => 49,
  "inline" => 50,
  "void" => 51,
  "char" => 52,
  "short" => 53,
  "int" => 54,
  "long" => 55,
  "float" => 56,
  "double" => 57,
  "signed" => 58,
  "unsigned" => 59,
  "__builtin_va_list" => 60,
  "const" => 61,
  "volatile" => 62,
  "__restrict" => 63,
  "{" => 64,
  "}" => 65,
  "struct" => 66,
  "union" => 67,
  "=" => 68,
  ":" => 69,
  "enum" => 70,
  "[" => 71,
  "]" => 72,
  "..." => 73,
  "case" => 74,
  "default" => 75,
  "if" => 76,
  "switch" => 77,
  "while" => 78,
  "do" => 79,
  "for" => 80,
  "goto" => 81,
  "continue" => 82,
  "break" => 83,
  "return" => 84,
  "*=" => 85,
  "/=" => 86,
  "%=" => 87,
  "+=" => 88,
  "-=" => 89,
  "<<=" => 90,
  ">>=" => 91,
  "&=" => 92,
  "^=" => 93,
  "|=" => 94,
  "?" => 95,
  "++" => 96,
  "--" => 97,
  "sizeof" => 98,
  "~" => 99,
  "!" => 100,
  "." => 101,
  "->" => 102 }

racc_nt_base = 103

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UNARY",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"else\"",
  "WITHOUT_ELSE",
  "IDENTIFIER",
  "TYPEDEF_NAME",
  "STRING",
  "INTEGER",
  "FLOAT",
  "CHARACTER",
  "ENUM_CONSTANT",
  "BadToken",
  "PreMarkupLeader",
  "PostMarkupLeader",
  "COMMENT",
  "LexBug",
  "\"__extension__\"",
  "\";\"",
  "\"__attribute__\"",
  "\"(\"",
  "\")\"",
  "\"__asm__\"",
  "\",\"",
  "\"__mode__\"",
  "\"__nonnull__\"",
  "\"__const\"",
  "\"auto\"",
  "\"register\"",
  "\"static\"",
  "\"extern\"",
  "\"typedef\"",
  "\"inline\"",
  "\"void\"",
  "\"char\"",
  "\"short\"",
  "\"int\"",
  "\"long\"",
  "\"float\"",
  "\"double\"",
  "\"signed\"",
  "\"unsigned\"",
  "\"__builtin_va_list\"",
  "\"const\"",
  "\"volatile\"",
  "\"__restrict\"",
  "\"{\"",
  "\"}\"",
  "\"struct\"",
  "\"union\"",
  "\"=\"",
  "\":\"",
  "\"enum\"",
  "\"[\"",
  "\"]\"",
  "\"...\"",
  "\"case\"",
  "\"default\"",
  "\"if\"",
  "\"switch\"",
  "\"while\"",
  "\"do\"",
  "\"for\"",
  "\"goto\"",
  "\"continue\"",
  "\"break\"",
  "\"return\"",
  "\"*=\"",
  "\"/=\"",
  "\"%=\"",
  "\"+=\"",
  "\"-=\"",
  "\"<<=\"",
  "\">>=\"",
  "\"&=\"",
  "\"^=\"",
  "\"|=\"",
  "\"?\"",
  "\"++\"",
  "\"--\"",
  "\"sizeof\"",
  "\"~\"",
  "\"!\"",
  "\".\"",
  "\"->\"",
  "$start",
  "real_program",
  "translation_unit",
  "external_declaration",
  "core_external_declaration",
  "pre_comment_list",
  "post_comment",
  "function_definition",
  "declaration",
  "declarator",
  "compound_statement",
  "declaration_specifiers",
  "declaration_list",
  "pure_declaration",
  "attributegroups",
  "init_declarator_list",
  "attributegroup",
  "attributes",
  "attribute",
  "integer_list",
  "storage_class_specifier",
  "type_specifier",
  "type_qualifier",
  "struct_or_union_specifier",
  "enum_specifier",
  "struct_or_union",
  "identifier",
  "struct_declaration_list",
  "struct_declaration",
  "init_declarator",
  "initializer",
  "specifier_qualifier_list",
  "struct_declarator_list",
  "pre_comment",
  "struct_declarator",
  "constant_expression",
  "enumerator_list",
  "enumerator_commented",
  "enumerator",
  "direct_declarator",
  "pointer",
  "parameter_type_list",
  "type_qualifier_list",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "assignment_expression",
  "initializer_list",
  "type_name",
  "direct_abstract_declarator",
  "statement",
  "c_statement",
  "labeled_statement",
  "expression_statement",
  "selection_statement",
  "iteration_statement",
  "jump_statement",
  "expression",
  "statement_list",
  "conditional_expression",
  "unary_expression",
  "assignment_operator",
  "logical_OR_expression",
  "exp",
  "cast_expression",
  "postfix_expression",
  "unary_operator",
  "primary_expression",
  "argument_expression_list",
  "constant",
  "string" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'cparse.y', 31)
  def _reduce_3(val, _values, result)
     extdecl(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 33)
  def _reduce_4(val, _values, result)
     extdecl(val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'cparse.y', 39)
  def _reduce_6(val, _values, result)
    		result = val[1]
		result.first.comment = val[0]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 44)
  def _reduce_7(val, _values, result)
    		result = val[0]
		result.last.comment = val[1]
	
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'cparse.y', 54)
  def _reduce_10(val, _values, result)
     raise "function should be declared as int" 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 56)
  def _reduce_11(val, _values, result)
     result = List.new.push(SymDecl.new(val[0], val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 59)
  def _reduce_12(val, _values, result)
    	  result = List.new.push(SymDecl.new(val[0], val[1]))
	  val[1].object.last.comment = val[2]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 63)
  def _reduce_13(val, _values, result)
     raise "pre-ANSI function" 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 65)
  def _reduce_14(val, _values, result)
     raise "pre-ANSI function" 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'cparse.y', 71)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 77)
  def _reduce_17(val, _values, result)
    	  # 構造体・共用体・列挙型の宣言
	  result = List.new.push(val[0])
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 82)
  def _reduce_18(val, _values, result)
    	  result = List.new.push(val[0])
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 86)
  def _reduce_19(val, _values, result)
    	  result = List.new
	  for variable in val[1]
	    # バグ: スコープを考えていない
	    @typedeftab[variable.name] = val[0] if val[0].typedef?
	    result.push SymDecl.new(val[0], variable)
	  end
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 95)
  def _reduce_20(val, _values, result)
    	  result = List.new
	  for variable in val[1]
	    # バグ: スコープを考えていない
	    @typedeftab[variable.name] = val[0] if val[0].typedef?
	    result.push SymDecl.new(val[0], variable)
	  end
	
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'cparse.y', 132)
  def _reduce_36(val, _values, result)
     result = DeclSpec.new.add_storage_class(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 134)
  def _reduce_37(val, _values, result)
     result = val[1].add_storage_class(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 136)
  def _reduce_38(val, _values, result)
     result = DeclSpec.new.add_type(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 138)
  def _reduce_39(val, _values, result)
     result = val[1].add_type(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 140)
  def _reduce_40(val, _values, result)
     result = DeclSpec.new.add_type_qual(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 142)
  def _reduce_41(val, _values, result)
     result = val[1].add_type_qual(val[0]) 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'cparse.y', 189)
  def _reduce_72(val, _values, result)
     result = List.new; result.push(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 191)
  def _reduce_73(val, _values, result)
     result = val[0]; result.push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 195)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 197)
  def _reduce_75(val, _values, result)
     result = Initialize.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

module_eval(<<'.,.,', 'cparse.y', 246)
  def _reduce_101(val, _values, result)
     result = Pointer.new(val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 250)
  def _reduce_102(val, _values, result)
     result = Identifier.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 252)
  def _reduce_103(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 254)
  def _reduce_104(val, _values, result)
     result = CArray.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 256)
  def _reduce_105(val, _values, result)
     result = CArray.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 258)
  def _reduce_106(val, _values, result)
     result = Func.new(val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 260)
  def _reduce_107(val, _values, result)
     result = Func.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 264)
  def _reduce_108(val, _values, result)
     result = DeclSpec.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 266)
  def _reduce_109(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 268)
  def _reduce_110(val, _values, result)
     result = Pointer.new(DeclSpec.new, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 270)
  def _reduce_111(val, _values, result)
     result = Pointer.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 274)
  def _reduce_112(val, _values, result)
     result = DeclSpec.new.add_type_qual(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 276)
  def _reduce_113(val, _values, result)
     result = val[0].add_type_qual(val[1]) 
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'cparse.y', 281)
  def _reduce_115(val, _values, result)
     result = val[0]; result.push(VarArgs.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 284)
  def _reduce_116(val, _values, result)
    	  result = val[0]
	  result.push(VarArgs.new)
	  result.last.comment = val[3]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 290)
  def _reduce_117(val, _values, result)
    	  result = val[0]
	  result.last.comment = val[2]
	  result.push(VarArgs.new)
	  result.last.comment = val[4]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 298)
  def _reduce_118(val, _values, result)
     result = List.new.push(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 300)
  def _reduce_119(val, _values, result)
     result = val[0]; result.push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 303)
  def _reduce_120(val, _values, result)
    	  result = val[0]
	  result.last.comment = val[2]
	  result.push val[3]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 309)
  def _reduce_121(val, _values, result)
    	  result = val[0]
	  result.last.comment = val[3]
	  result.push val[4]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 316)
  def _reduce_122(val, _values, result)
     result = Param.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 318)
  def _reduce_123(val, _values, result)
     result = Param.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 321)
  def _reduce_124(val, _values, result)
    	  result = Param.new(val[0], val[1])
	  result.comment = val[2]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 326)
  def _reduce_125(val, _values, result)
    	  result = Param.new(val[0], val[1])
	  result.comment = val[3]
	
    result
  end
.,.,

# reduce 126 omitted

module_eval(<<'.,.,', 'cparse.y', 331)
  def _reduce_127(val, _values, result)
     result = Param.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'cparse.y', 479)
  def _reduce_237(val, _values, result)
     result = CArray.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

module_eval(<<'.,.,', 'cparse.y', 489)
  def _reduce_244(val, _values, result)
     result = Identifier.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 491)
  def _reduce_245(val, _values, result)
     result = Constant.new(val[0]) 
    result
  end
.,.,

# reduce 246 omitted

module_eval(<<'.,.,', 'cparse.y', 494)
  def _reduce_247(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 498)
  def _reduce_248(val, _values, result)
     result = Constant.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 500)
  def _reduce_249(val, _values, result)
     result = StrCat.new(val[0], Constant.new(val[1])) 
    result
  end
.,.,

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

module_eval(<<'.,.,', 'cparse.y', 511)
  def _reduce_256(val, _values, result)
     puts "broken token `#{val}`"; yyerror 
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

module_eval(<<'.,.,', 'cparse.y', 519)
  def _reduce_260(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 522)
  def _reduce_261(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 523)
  def _reduce_262(val, _values, result)
     result = (val[0].is_a?(Array) ? val[0] : [val[0]]) + (val[1].is_a?(Array) ? val[1] : [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 526)
  def _reduce_263(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'cparse.y', 527)
  def _reduce_264(val, _values, result)
     result = (val[0].is_a?(Array) ? val[0] : [val[0]]) + (val[1].is_a?(Array) ? val[1] : [val[1]]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CParser


if $0 == __FILE__
  parser = CParser.new

  handler = proc { |extdecl|
    p extdecl.cstr
  }
  if ARGV.empty? then
    parser.parse(STDIN, :on_extdecl => handler)
  else
    for file in ARGV
      fp = File.open(file)
      parser.parse(fp, :on_extdecl => handler)
      fp.close
    end
  end
end
