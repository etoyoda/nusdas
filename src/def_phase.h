/** @file
 * @brief [auto-generated by def_phase.rb] token2phase() used in def_read.c.
 *
 * Do not edit this file.
 */

/** phase id corresponding to given keyword */
	INLINE enum parse_phase
token2phase(const char *token)
{
#if ALLOW_LONG_LONG_SWITCH
	sym8_t		sym;
	sym = str2sym8(token);
#else
	sym4_t		sym;
	sym = str2sym4(token);
#endif
	switch (sym) {
#if ALLOW_LONG_LONG_SWITCH
	case SYM8_BASEPOIN:
		if (strcmp(token, "BASEPOINT") == 0) {
			return pBASEPOINT;
		} else {
			return pERR;
		}
	case SYM8_BASETIME:
		return (token[8] == '\0') ? pBASETIME : pERR;
	case SYM8_CREATOR:
		return pCREATOR;
	case SYM8_DISTANCE:
		return (token[8] == '\0') ? pDISTANCE : pERR;
	case SYM8_ELEMENT:
		return pELEMENT;
	case SYM8_ELEMENTM:
		if (strcmp(token, "ELEMENTMAP") == 0) {
			return pELEMENTMAP;
		} else {
			return pERR;
		}
	case SYM8_FILENAME:
		return (token[8] == '\0') ? pFILENAME : pERR;
	case SYM8_FORCEDRL:
		if (strcmp(token, "FORCEDRLEN") == 0) {
			return pFORCEDRLEN;
		} else {
			return pERR;
		}
	case SYM8_INFORMAT:
		if (strcmp(token, "INFORMATION") == 0) {
			return pINFORMATION;
		} else {
			return pERR;
		}
	case SYM8_MEMBER:
		return pMEMBER;
	case SYM8_MEMBERLI:
		if (strcmp(token, "MEMBERLIST") == 0) {
			return pMEMBERLIST;
		} else {
			return pERR;
		}
	case SYM8_MISSING:
		return pMISSING;
	case SYM8_MISSSING:
		return (token[8] == '\0') ? pMISSING : pERR;
	case SYM8_NUSDAS:
		return pNUSDAS;
	case SYM8_OPTION:
		return pOPTIONS;
	case SYM8_OPTIONS:
		return pOPTIONS;
	case SYM8_OTHER:
		return pOTHERS;
	case SYM8_OTHERS:
		return pOTHERS;
	case SYM8_PACKING:
		return pPACKING;
	case SYM8_PATH:
		return pPATH;
	case SYM8_PLANE:
		return pPLANE;
	case SYM8_PLANE1:
		return pPLANE1;
	case SYM8_PLANE2:
		return pPLANE2;
	case SYM8_SIZE:
		return pSIZE;
	case SYM8_STANDARD:
		return (token[8] == '\0') ? pSTANDARD : pERR;
	case SYM8_SUBCNTL:
		return pSUBCNTL;
	case SYM8_SUBCTNL:
		return pSUBCNTL;
	case SYM8_TYPE1:
		return pTYPE1;
	case SYM8_TYPE2:
		return pTYPE2;
	case SYM8_TYPE3:
		return pTYPE3;
	case SYM8_VALIDTIM:
		if (strcmp(token, "VALIDTIME") == 0) {
			return pVALIDTIME;
		} else if (strcmp(token, "VALIDTIME1") == 0) {
			return pVALIDTIME1;
		} else if (strcmp(token, "VALIDTIME2") == 0) {
			return pVALIDTIME2;
		} else {
			return pERR;
		}
	case SYM8_VALUE:
		return pVALUE;
#else
	case SYM4_BASE:
		if (strcmp(token, "BASETIME") == 0) {
			return pBASETIME;
		} else if (strcmp(token, "BASEPOINT") == 0) {
			return pBASEPOINT;
		} else {
			return pERR;
		}
	case SYM4_CREA:
		if (strcmp(token, "CREATOR") == 0) {
			return pCREATOR;
		} else {
			return pERR;
		}
	case SYM4_DIST:
		if (strcmp(token, "DISTANCE") == 0) {
			return pDISTANCE;
		} else {
			return pERR;
		}
	case SYM4_ELEM:
		if (strcmp(token, "ELEMENT") == 0) {
			return pELEMENT;
		} else if (strcmp(token, "ELEMENTMAP") == 0) {
			return pELEMENTMAP;
		} else {
			return pERR;
		}
	case SYM4_FILE:
		if (strcmp(token, "FILENAME") == 0) {
			return pFILENAME;
		} else {
			return pERR;
		}
	case SYM4_FORC:
		if (strcmp(token, "FORCEDRLEN") == 0) {
			return pFORCEDRLEN;
		} else {
			return pERR;
		}
	case SYM4_INFO:
		if (strcmp(token, "INFORMATION") == 0) {
			return pINFORMATION;
		} else {
			return pERR;
		}
	case SYM4_MEMB:
		if (strcmp(token, "MEMBER") == 0) {
			return pMEMBER;
		} else if (strcmp(token, "MEMBERLIST") == 0) {
			return pMEMBERLIST;
		} else {
			return pERR;
		}
	case SYM4_MISS:
		if (strcmp(token, "MISSING") == 0) {
			return pMISSING;
		} else if (strcmp(token, "MISSSING") == 0) {
			return pMISSING;
		} else {
			return pERR;
		}
	case SYM4_NUSD:
		if (strcmp(token, "NUSDAS") == 0) {
			return pNUSDAS;
		} else {
			return pERR;
		}
	case SYM4_OPTI:
		if (strcmp(token, "OPTIONS") == 0) {
			return pOPTIONS;
		} else if (strcmp(token, "OPTION") == 0) {
			return pOPTIONS;
		} else {
			return pERR;
		}
	case SYM4_OTHE:
		if (strcmp(token, "OTHERS") == 0) {
			return pOTHERS;
		} else if (strcmp(token, "OTHER") == 0) {
			return pOTHERS;
		} else {
			return pERR;
		}
	case SYM4_PACK:
		if (strcmp(token, "PACKING") == 0) {
			return pPACKING;
		} else {
			return pERR;
		}
	case SYM4_PATH:
		return (token[4] == '\0') ? pPATH : pERR;
	case SYM4_PLAN:
		if (strcmp(token, "PLANE") == 0) {
			return pPLANE;
		} else if (strcmp(token, "PLANE1") == 0) {
			return pPLANE1;
		} else if (strcmp(token, "PLANE2") == 0) {
			return pPLANE2;
		} else {
			return pERR;
		}
	case SYM4_SIZE:
		return (token[4] == '\0') ? pSIZE : pERR;
	case SYM4_STAN:
		if (strcmp(token, "STANDARD") == 0) {
			return pSTANDARD;
		} else {
			return pERR;
		}
	case SYM4_SUBC:
		if (strcmp(token, "SUBCNTL") == 0) {
			return pSUBCNTL;
		} else if (strcmp(token, "SUBCTNL") == 0) {
			return pSUBCNTL;
		} else {
			return pERR;
		}
	case SYM4_TYPE:
		if (strcmp(token, "TYPE1") == 0) {
			return pTYPE1;
		} else if (strcmp(token, "TYPE2") == 0) {
			return pTYPE2;
		} else if (strcmp(token, "TYPE3") == 0) {
			return pTYPE3;
		} else {
			return pERR;
		}
	case SYM4_VALI:
		if (strcmp(token, "VALIDTIME") == 0) {
			return pVALIDTIME;
		} else if (strcmp(token, "VALIDTIME1") == 0) {
			return pVALIDTIME1;
		} else if (strcmp(token, "VALIDTIME2") == 0) {
			return pVALIDTIME2;
		} else {
			return pERR;
		}
	case SYM4_VALU:
		if (strcmp(token, "VALUE") == 0) {
			return pVALUE;
		} else {
			return pERR;
		}
#endif
	}
	return pERR;
}
