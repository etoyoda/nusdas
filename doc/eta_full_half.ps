%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) p1.7a Copyright 2005 ASCII Corp.(www-ptex@ascii.co.jp)
%%+ based on dvips(k) 5.95b Copyright 2005 Radical Eye Software (www.radicaleye.com)
%%Title: a.dvi
%%CreationDate: Wed Mar 28 12:21:34 2007
%%BoundingBox: 71 492 498 721
%%DocumentFonts: CMR10 CMR7 CMMI10 CMSY10 Ryumin-Light-H
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E a
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2007.03.28:1221
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 4, 04/05/10
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
  z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def /x x Coef mul def /y1 y1 Coef mul def /x1 x1 Coef mul def
  x1 0 gt y1 0 gt x 0 gt y 0 gt and { [ y x y1 x1 ] 1 a sub y mul}
  { [ 1 0] 0 } ifelse setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
    n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8B1550654AD5E22C5F3F3CC8C1C0A6C7ADDAB55016A76EC46213FD9BAAF
03F7A5FD261BF647FCA5049118033F809370A84AC3ADA3D5BE032CBB494D7851
A6242E785CCC20D81FC5EE7871F1E588DA3E31BD321C67142C5D76BC6AC708DF
C21616B4CC92F0F8B92BD37A4AB83E066D1245FAD89B480CB0AC192D4CAFA6AD
241BD8DF7AD566A2022FBC67364AB89F33608554113D210FE5D27F8FB1B2B78A
F22EC999DBAAFC9C60017101D5FB2A3B6E2BF4BE47B8E5E4662B8C41AB471DFC
A31EE1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 110 /n put
dup 122 /z put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC0E2F840512D321166547B306C592B8A01E1FA2564B9A26DAC14256414E4C8
42616728D918C74D13C349F4186EC7B9708B86467425A6FDB3A396562F7EE4D8
40B43621744CF8A23A6E532649B66C2A0002DD04F8F39618E4F572819DD34837
B5A08E643FDCA1505AF6A1FA3DDFD1FA758013CAED8ACDDBBB334D664DFF5B53
95601766777978D01677B8D19E1B10A078432D2884BB4DA15CCDF2B1BC2E1369
39241980607344C8D77905FAFDA723DED571D6E33264B8B8C134684B53F11A83
1FA71CC8002020618FC9E0B2468923F1220DBBB9A0566B917A46FE4D8B7E3DBF
E155C33BB39D97A4F4966159F90178CA79D666B846E1E4BA0BA2F6E05683A3AF
DFA8BC2E7C0EA47F10A873F39CA8DF0CA3EB46AFE6A3006D4A093A89E1FBBA69
979E4FB1810486957E445E6807CB3D7DF83A969F2C27167953F54A4A69FADF0C
46C67CD1E84F9B009D461125555D9C5EB3ED96418376B6434CF5A6239C5AFE0A
10956F4D18E43149B3336848AD818A025CE9DEE5F0E086580CB4339E58C7DB45
1FE5C4F16CC1078192F37420F0B109D02FB0DB7BF47CEE4564C94B35544A0CD8
4429491335CB9D22D9A966BF9026D219E95E944B00FFD0D3A4631DA55F4F6678
56749CD61172246B1CB9095199007CE763A3C6B4869E01644A0669BCF87742E2
C0B32AB10239AFA531749262A1683F04BC6600BDA6DB28C7B0681931D5EFC258
ACC699E57DF1E71A5F6C65DF9916E1B204ADCF2EF43B28C153A5EFF578D23C81
E2F20AD4F286E0808D8B7671287A9C7CC4AC0BFAAAF1F8E811B73D2C582DE355
6219D9FFD07610BD63FD1924E7606CDFE0360CF51F929A308AE3AC8F8D13BB5E
8904130E0E812B4F756BF894243223A986B91B38A8F80BD305F39F8A989C16F4
F6204953F25DD369347984A6232F7CA29CBB09D103D42F83E845C8B3517A4A89
4787C88C13E33527E2EB62A29EAAC8BFF8DA87335DD37C7F7E9DC34C4DA739DF
32393A72934897F13A55CBD6E243C1BFC6B61A3F1C6673C44FB98C04C05793DC
0B68187A07A4E7CD6073E94D990045AD5F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4CD5C7347D2E
1D0D6630F446F3708FCB29A85F40B4DAB4D60AA8F5B2DBD67F2E45D80C7A7E86
144669F75F8FA14609F8E4246FEC475ED262E03D30393C78C7828206842B565A
DBE20EA52EE9C4C3862B2F5F12CF89D935B89B84A45CEFCEAEE8EC8806339364
56FF1FE2E5112803E3E40162D5188D2210A54816AA9960611721C23A292AE80A
8F8C0FB114D71C111700B0FEA8804F37C5D31ECD7006603C53F4BDF7208286AF
3A25CEE58E88BF81A4800B68C2A19EBDADF9B1074702E779A7DD915EFE09D35E
BD176D7346D859D0944520171C4E97696AE0502C43C391FCE5E8FB1789065E18
BE3AF62200D57912360411CE848B4550D1B0A3BA576F9B41CED3A23E753631A7
25375ABE8A4B55BC65AE2EAFAE452766961965093084D218637FB447795CC991
EB1EF26BF82B7A81FA847ABD3B559D35828AD7DDC5FC7B43C6C14E6ADEDD7663
F272AA9A121630C5263D58773BCB1437EC2FC54C4AF90E677A8E7D1738D003D4
18998C03CC9AE182E7758767FEB5E1B03C6CC32AD30D0ABAE6552290771E2CB1
A23F469A8447C1868C6DEC2C3C2BCFC691867E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC390C98D93BE299A9CB
689CDA9BE6BEA47570D9D15DC614719507F27069622E7DB1A97F7B6FF5A5A0C5
78162E7A9CF76FF72A34097236DF64DA4B61645C7326058030E2B5AABFCC44D0
49E9CD83D81D8ECA953BDB8CA81CD3D122FAB35612C9C3F6C7F22B666462A78C
AC5473F8755B70B582C0D4C3C9D8C70EE755D41A42C8C17F066414DC21B33111
A188A5FDDC2D6B02C0965CDC0D91DF1A487ABBBBE2E2896CE0B4BFBE38C79866
BCD14C2C92449525BD879F6BC320C05FEF8BF68D616695ACD14B3594882B4914
5B7569629AF50EBCF7152E3715510FBF60F1675D5259715B293A3D7E844764F8
4B88D997BA5C7B7AB6B104E77F7769C22788334A91C91F02CE675DC14E1FDE5A
F8A03756C12F189494DBC735E3C86A6D4BC4D005E323AC4D7CEF6E1820F9F184
4DD2EC4C5C58AEE4B5344077AFCCCD82CFC289D46552563B36DA5DAF3C179C90
BBB4163F2E88909E040769367672B37254345F892D42DF5D5261EAB4CFD4745D
7D72D01D779DEA580D7AA0897250CB8CC10EF282B3A1899F63F375E39C44176C
B24ED076A6BAEC8663444DE1D85B533AD932CFAF70D7CCFAA42C753520DEB852
DD183C7EBD5544242F56F044E3C739316626175466539F3EB5B699FF8F4E74ED
A0411CC091A6F6EDBA8349581FDBF29E0CA515824C1FDD47FCE9055639693EAF
06C2F7AE93DF7A06F77250D1AE1EF8006AC8CCBE11970032B395985FD9C0014B
B6980C63B3D1D97725FED0FF2B9DAB55C9E9E91736BD4EDAD969E673DA85B159
160862ADA6B7EF9220DB8481F7B8488C61DD16D6ADAC20B22EE3FD6327484051
F958C2B7E9B5B5868C608FA0E96729BBE8D71E277EEF6581FC2CE5BC6923B5FB
5F74185CFDE5BE69324E90B9DFFEFE5CEE487D7A7F9820A218C4541C49C4C774
9A95BE0A394E51AD33B132773688CCBFEC675986D22CC4EE23F5EF49A9F2490E
5276E9D0AF7BAEB42FE3809A123C83B202EAAD8E8BA11CCB2AAFB6C6E56C1B60
D142359DC3237AD0484425704DC4A6D860D089064DAF80456C88720E49CB79C7
B6C4A1B0EA9AAC2D9D35B5BCCEB9E2408EF0F46DE88B068C08442A6E0ADC4F54
99ADA5E5A58530FF1D0B75C7E7D27892020CC62CA61AD3B7AB4846CCCC3CCE52
52DC169409A9038D4F374BFA35EF02C2731D8E0CAC54F4933431BDFE5CA2B20A
D606CA4835FCDDEBAFA6EBA1DC3A84485AF8EA94948674F8CD9FBCACD9A625E4
B6E7C778C50AB1846607FCAACABD5729623AEDB6D6EAB61A6EE798DD06994C46
F6ED70CF8CD3F821C19CD02F2E3306D85A8DA5DB658CE524D575B7B345A51420
44F241F82FD93DB84BEEECDB07D78CC93133B4A42B7AE0AE78C51B3F36F4B0E0
832BD1E24CFFD996987BC3B38392BB3F362C35344266B8AC053EC70778B49801
1C18C15E53A3A24486D14823128BC75DD6102F0E22FF034D63C1F5BEE64EBF7B
49C56E31CDF45564AD43012C8E1C00D3FB082E62992CB688E874CCFBC8E2A5F1
9B36536FF072693C397CB7BDCE48360B5A458C90B6B84F4464E2271BB1D0750B
EB81398EDCA5B3A2C90A4990824DFC7AAE7F6FCFED88F32FC27541A77060498A
75D8264CB4E060035196485A18E8AB04F3145EE0DF4EC0FC755B181799E54514
CE3CDBE3C1240DF6FB6D50EF31D20C4BBF41984F31169C2AB7AFB98FC2680C24
473420A2A08EADD2C6FE5F50B44E0DE16A8C449E342537B826A6A5012E8CA29E
F432B959A32E658AEEAF4AC498871B0698C7207AFE5EC4DA9D6274EB8D6CF4A7
5E4873BFC5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (a.dvi)
@start /Fa 256[{ } 0 79.8851 /Ryumin-Light-H rf /Fb 255[ 65{ } 1
83.022 /CMSY10 rf /Fc 133[ 39 11[ 50 110[{ } 2 83.022
/CMMI10 rf /Fd 205[ 33 33 49[{ } 2 58.1154 /CMR7 rf /Fe
204[ 42 42 42 42 4[ 65 43[{ } 5 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 1 TeXcolorgray 0
TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0.25 TeXcolorgray 0 TeXcolorgray 0.5 TeXcolorgray
0 TeXcolorgray 0 1890 a
 tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip setmatrix end
 0 1890 a 0 1890 3544 1890 v 3544
1890 a
 currentpoint grestore moveto
 3544 1890 a 0.75 TeXcolorgray 0 TeXcolorgray 1654
2362 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def [ 142.26372 105.27505 139.41826 105.27505 136.57324 105.27505 133.7278 105.27505 130.88278 105.27505 128.03734 105.27505 125.1919 105.2755 122.34688 105.2755 119.50143 105.27592 116.65642 105.27592 113.81097 105.27635 110.96552 105.27722 108.1205 105.27853 105.27505 105.2807 102.43004 105.28418 99.5846 105.28938 96.73915 105.2972 93.89413 105.30891 91.04869 105.3263 88.20367 105.35147 85.35823 105.38794 82.51277 105.44003 79.66776 105.51254 76.82231 105.6124 73.9773 105.74872 71.13185 105.93193 68.2864 106.17375 65.44139 106.48895 62.59595 106.89401 59.75093 107.40675 56.90549 108.04626 54.06003 108.83252 51.21501 109.78244 48.36957 110.91429 45.52455 112.24063 42.67911 113.76929 39.83366 115.50113 36.98865 117.43051 34.1432 119.5392 31.29819 121.80157 28.45274 124.179 25.60728 126.62329 22.76227 129.0767 19.91682 131.47498 17.07181 133.7482 14.22636 135.82477 11.38092 137.63606 8.5359 139.1187 5.69046 140.21928 2.84544 140.89699 0.0 141.1258 -2.84544 140.89699 -5.69046 140.21928 -8.5359 139.1187 -11.38092 137.63606 -14.22636 135.82477 -17.07181 133.7482 -19.91682 131.47498 -22.76227 129.0767 -25.60728 126.62329 -28.45274 124.179 -31.29819 121.80157 -34.1432 119.5392 -36.98865 117.43051 -39.83366 115.50113 -42.67911 113.76929 -45.52455 112.24063 -48.36957 110.91429 -51.21501 109.78244 -54.06003 108.83252 -56.90549 108.04626 -59.75093 107.40675 -62.59595 106.89401 -65.44139 106.48895 -68.2864 106.17375 -71.13185 105.93193 -73.9773 105.74872 -76.82231 105.6124 -79.66776 105.51254 -82.51277 105.44003 -85.35823 105.38794 -88.20367 105.35147 -91.04869 105.3263 -93.89413 105.30891 -96.73915 105.2972 -99.5846 105.28938 -102.43004 105.28418 -105.27505 105.2807 -108.1205 105.27853 -110.96552 105.27722 -113.81097 105.27635 -116.65642 105.27592 -119.50143 105.27592 -122.34688 105.2755 -125.1919 105.2755 -128.03734 105.27505 -130.88278 105.27505 -133.7278 105.27505 -136.57324 105.27505 -139.41826 105.27505 -142.26372 105.27505  /currentpoint load stopped pop /Lineto /lineto load def false Line  0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def [ -142.26372 105.27505 142.26372 105.27505  /currentpoint load stopped pop /Lineto /lineto load def false Line  gsave 0.75  setgray fill grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 105.27505 139.41826 105.27505 136.57324 105.27505 133.7278 105.27505 130.88278 105.27505 128.03734 105.27505 125.1919 105.2755 122.34688 105.2755 119.50143 105.27592 116.65642 105.27592 113.81097 105.27635 110.96552 105.27722 108.1205 105.27853 105.27505 105.2807 102.43004 105.28418 99.5846 105.28938 96.73915 105.2972 93.89413 105.30891 91.04869 105.3263 88.20367 105.35147 85.35823 105.38794 82.51277 105.44003 79.66776 105.51254 76.82231 105.6124 73.9773 105.74872 71.13185 105.93193 68.2864 106.17375 65.44139 106.48895 62.59595 106.89401 59.75093 107.40675 56.90549 108.04626 54.06003 108.83252 51.21501 109.78244 48.36957 110.91429 45.52455 112.24063 42.67911 113.76929 39.83366 115.50113 36.98865 117.43051 34.1432 119.5392 31.29819 121.80157 28.45274 124.179 25.60728 126.62329 22.76227 129.0767 19.91682 131.47498 17.07181 133.7482 14.22636 135.82477 11.38092 137.63606 8.5359 139.1187 5.69046 140.21928 2.84544 140.89699 0.0 141.1258 -2.84544 140.89699 -5.69046 140.21928 -8.5359 139.1187 -11.38092 137.63606 -14.22636 135.82477 -17.07181 133.7482 -19.91682 131.47498 -22.76227 129.0767 -25.60728 126.62329 -28.45274 124.179 -31.29819 121.80157 -34.1432 119.5392 -36.98865 117.43051 -39.83366 115.50113 -42.67911 113.76929 -45.52455 112.24063 -48.36957 110.91429 -51.21501 109.78244 -54.06003 108.83252 -56.90549 108.04626 -59.75093 107.40675 -62.59595 106.89401 -65.44139 106.48895 -68.2864 106.17375 -71.13185 105.93193 -73.9773 105.74872 -76.82231 105.6124 -79.66776 105.51254 -82.51277 105.44003 -85.35823 105.38794 -88.20367 105.35147 -91.04869 105.3263 -93.89413 105.30891 -96.73915 105.2972 -99.5846 105.28938 -102.43004 105.28418 -105.27505 105.2807 -108.1205 105.27853 -110.96552 105.27722 -113.81097 105.27635 -116.65642 105.27592 -119.50143 105.27592 -122.34688 105.2755 -125.1919 105.2755 -128.03734 105.27505 -130.88278 105.27505 -133.7278 105.27505 -136.57324 105.27505 -139.41826 105.27505 -142.26372 105.27505  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fe 2882 1509 a(0) 18 b(+)p Fd
3035 1476 a(1)p 3035 1490 34 4 v 3035 1538 a(2) 1654
2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 123.20042 139.41826 123.20042 136.57324 123.20042 133.7278 123.20042 130.88278 123.20042 128.03734 123.20042 125.1919 123.20042 122.34688 123.20085 119.50143 123.20085 116.65642 123.20085 113.81097 123.20172 110.96552 123.20216 108.1205 123.20346 105.27505 123.20563 102.43004 123.20824 99.5846 123.21301 96.73915 123.21996 93.89413 123.23082 91.04869 123.24644 88.20367 123.26903 85.35823 123.30202 82.51277 123.34846 79.66776 123.41403 76.82231 123.50433 73.9773 123.62677 71.13185 123.7913 68.2864 124.00882 65.44139 124.29276 62.59595 124.65744 59.75093 125.11896 56.90549 125.69464 54.06003 126.40189 51.21501 127.25716 48.36957 128.2757 45.52455 129.46918 42.67911 130.84502 39.83366 132.40407 36.98865 134.14024 34.1432 136.03838 31.29819 138.07413 28.45274 140.21364 25.60728 142.4135 22.76227 144.62204 19.91682 146.78021 17.07181 148.82596 14.22636 150.69499 11.38092 152.32524 8.5359 153.65984 5.69046 154.65013 2.84544 155.26012 0.0 155.46591 -2.84544 155.26012 -5.69046 154.65013 -8.5359 153.65984 -11.38092 152.32524 -14.22636 150.69499 -17.07181 148.82596 -19.91682 146.78021 -22.76227 144.62204 -25.60728 142.4135 -28.45274 140.21364 -31.29819 138.07413 -34.1432 136.03838 -36.98865 134.14024 -39.83366 132.40407 -42.67911 130.84502 -45.52455 129.46918 -48.36957 128.2757 -51.21501 127.25716 -54.06003 126.40189 -56.90549 125.69464 -59.75093 125.11896 -62.59595 124.65744 -65.44139 124.29276 -68.2864 124.00882 -71.13185 123.7913 -73.9773 123.62677 -76.82231 123.50433 -79.66776 123.41403 -82.51277 123.34846 -85.35823 123.30202 -88.20367 123.26903 -91.04869 123.24644 -93.89413 123.23082 -96.73915 123.21996 -99.5846 123.21301 -102.43004 123.20824 -105.27505 123.20563 -108.1205 123.20346 -110.96552 123.20216 -113.81097 123.20172 -116.65642 123.20085 -119.50143 123.20085 -122.34688 123.20085 -125.1919 123.20042 -128.03734 123.20042 -130.88278 123.20042 -133.7278 123.20042 -136.57324 123.20042 -139.41826 123.20042 -142.26372 123.20042  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fe 2882
1360 a(1)g(+)p Fd 3035 1327 a(1)p 3035 1341 V 3035 1389
a(2) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 141.1258 139.41826 141.1258 136.57324 141.1258 133.7278 141.1258 130.88278 141.1258 128.03734 141.1258 125.1919 141.1258 122.34688 141.1258 119.50143 141.1258 116.65642 141.12622 113.81097 141.12666 110.96552 141.12709 108.1205 141.1284 105.27505 141.13013 102.43004 141.13274 99.5846 141.13708 96.73915 141.14316 93.89413 141.15271 91.04869 141.1666 88.20367 141.18657 85.35823 141.2161 82.51277 141.25734 79.66776 141.31552 76.82231 141.3954 73.9773 141.50438 71.13185 141.65068 68.2864 141.84431 65.44139 142.09656 62.59595 142.42087 59.75093 142.83115 56.90549 143.34259 54.06003 143.97124 51.21501 144.73187 48.36957 145.63708 45.52455 146.69772 42.67911 147.92075 39.83366 149.30656 36.98865 150.84998 34.1432 152.53667 31.29819 154.34666 28.45274 156.24869 25.60728 158.20412 22.76227 160.16693 19.91682 162.08546 17.07181 163.90414 14.22636 165.56522 11.38092 167.01442 8.5359 168.20053 5.69046 169.081 2.84544 169.62282 0.0 169.80603 -2.84544 169.62282 -5.69046 169.081 -8.5359 168.20053 -11.38092 167.01442 -14.22636 165.56522 -17.07181 163.90414 -19.91682 162.08546 -22.76227 160.16693 -25.60728 158.20412 -28.45274 156.24869 -31.29819 154.34666 -34.1432 152.53667 -36.98865 150.84998 -39.83366 149.30656 -42.67911 147.92075 -45.52455 146.69772 -48.36957 145.63708 -51.21501 144.73187 -54.06003 143.97124 -56.90549 143.34259 -59.75093 142.83115 -62.59595 142.42087 -65.44139 142.09656 -68.2864 141.84431 -71.13185 141.65068 -73.9773 141.50438 -76.82231 141.3954 -79.66776 141.31552 -82.51277 141.25734 -85.35823 141.2161 -88.20367 141.18657 -91.04869 141.1666 -93.89413 141.15271 -96.73915 141.14316 -99.5846 141.13708 -102.43004 141.13274 -105.27505 141.13013 -108.1205 141.1284 -110.96552 141.12709 -113.81097 141.12666 -116.65642 141.12622 -119.50143 141.1258 -122.34688 141.1258 -125.1919 141.1258 -128.03734 141.1258 -130.88278 141.1258 -133.7278 141.1258 -136.57324 141.1258 -139.41826 141.1258 -142.26372 141.1258  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
Fe 2882 1211 a(2)g(+)p Fd 3035 1179 a(1)p 3035 1193 V
3035 1240 a(2) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 227.62195 139.41826 227.62195 136.57324 227.62195 133.7278 227.62195 130.88278 227.62195 128.03734 227.62195 125.1919 227.62195 122.34688 227.62195 119.50143 227.62195 116.65642 227.62195 113.81097 227.62195 110.96552 227.62195 108.1205 227.62195 105.27505 227.62195 102.43004 227.62195 99.5846 227.62195 96.73915 227.62195 93.89413 227.62195 91.04869 227.62195 88.20367 227.62195 85.35823 227.62195 82.51277 227.62195 79.66776 227.62195 76.82231 227.62195 73.9773 227.62195 71.13185 227.62195 68.2864 227.62195 65.44139 227.62195 62.59595 227.62195 59.75093 227.62195 56.90549 227.62195 54.06003 227.62195 51.21501 227.62195 48.36957 227.62195 45.52455 227.62195 42.67911 227.62195 39.83366 227.62195 36.98865 227.62195 34.1432 227.62195 31.29819 227.62195 28.45274 227.62195 25.60728 227.62195 22.76227 227.62195 19.91682 227.62195 17.07181 227.62195 14.22636 227.62195 11.38092 227.62195 8.5359 227.62195 5.69046 227.62195 2.84544 227.62195 0.0 227.62195 -2.84544 227.62195 -5.69046 227.62195 -8.5359 227.62195 -11.38092 227.62195 -14.22636 227.62195 -17.07181 227.62195 -19.91682 227.62195 -22.76227 227.62195 -25.60728 227.62195 -28.45274 227.62195 -31.29819 227.62195 -34.1432 227.62195 -36.98865 227.62195 -39.83366 227.62195 -42.67911 227.62195 -45.52455 227.62195 -48.36957 227.62195 -51.21501 227.62195 -54.06003 227.62195 -56.90549 227.62195 -59.75093 227.62195 -62.59595 227.62195 -65.44139 227.62195 -68.2864 227.62195 -71.13185 227.62195 -73.9773 227.62195 -76.82231 227.62195 -79.66776 227.62195 -82.51277 227.62195 -85.35823 227.62195 -88.20367 227.62195 -91.04869 227.62195 -93.89413 227.62195 -96.73915 227.62195 -99.5846 227.62195 -102.43004 227.62195 -105.27505 227.62195 -108.1205 227.62195 -110.96552 227.62195 -113.81097 227.62195 -116.65642 227.62195 -119.50143 227.62195 -122.34688 227.62195 -125.1919 227.62195 -128.03734 227.62195 -130.88278 227.62195 -133.7278 227.62195 -136.57324 227.62195 -139.41826 227.62195 -142.26372 227.62195  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end


@endspecial Fc 2882 493 a(nz)p Fb 21 w(\000)p Fe 18
w(2)g(+)p Fd 3228 461 a(1)p 3228 475 V 3228 522 a(2) 1654
2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 256.07469 139.41826 256.07469 136.57324 256.07469 133.7278 256.07469 130.88278 256.07469 128.03734 256.07469 125.1919 256.07469 122.34688 256.07469 119.50143 256.07469 116.65642 256.07469 113.81097 256.07469 110.96552 256.07469 108.1205 256.07469 105.27505 256.07469 102.43004 256.07469 99.5846 256.07469 96.73915 256.07469 93.89413 256.07469 91.04869 256.07469 88.20367 256.07469 85.35823 256.07469 82.51277 256.07469 79.66776 256.07469 76.82231 256.07469 73.9773 256.07469 71.13185 256.07469 68.2864 256.07469 65.44139 256.07469 62.59595 256.07469 59.75093 256.07469 56.90549 256.07469 54.06003 256.07469 51.21501 256.07469 48.36957 256.07469 45.52455 256.07469 42.67911 256.07469 39.83366 256.07469 36.98865 256.07469 34.1432 256.07469 31.29819 256.07469 28.45274 256.07469 25.60728 256.07469 22.76227 256.07469 19.91682 256.07469 17.07181 256.07469 14.22636 256.07469 11.38092 256.07469 8.5359 256.07469 5.69046 256.07469 2.84544 256.07469 0.0 256.07469 -2.84544 256.07469 -5.69046 256.07469 -8.5359 256.07469 -11.38092 256.07469 -14.22636 256.07469 -17.07181 256.07469 -19.91682 256.07469 -22.76227 256.07469 -25.60728 256.07469 -28.45274 256.07469 -31.29819 256.07469 -34.1432 256.07469 -36.98865 256.07469 -39.83366 256.07469 -42.67911 256.07469 -45.52455 256.07469 -48.36957 256.07469 -51.21501 256.07469 -54.06003 256.07469 -56.90549 256.07469 -59.75093 256.07469 -62.59595 256.07469 -65.44139 256.07469 -68.2864 256.07469 -71.13185 256.07469 -73.9773 256.07469 -76.82231 256.07469 -79.66776 256.07469 -82.51277 256.07469 -85.35823 256.07469 -88.20367 256.07469 -91.04869 256.07469 -93.89413 256.07469 -96.73915 256.07469 -99.5846 256.07469 -102.43004 256.07469 -105.27505 256.07469 -108.1205 256.07469 -110.96552 256.07469 -113.81097 256.07469 -116.65642 256.07469 -119.50143 256.07469 -122.34688 256.07469 -125.1919 256.07469 -128.03734 256.07469 -130.88278 256.07469 -133.7278 256.07469 -136.57324 256.07469 -139.41826 256.07469 -142.26372 256.07469  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fc 2882
257 a(nz)p Fb 21 w(\000)p Fe 18 w(1)g(+)p Fd 3228 224
a(1)p 3228 238 V 3228 286 a(2) 1654 2362 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 270.30106 139.41826 270.30106 136.57324 270.30106 133.7278 270.30106 130.88278 270.30106 128.03734 270.30106 125.1919 270.30106 122.34688 270.30106 119.50143 270.30106 116.65642 270.30106 113.81097 270.30106 110.96552 270.30106 108.1205 270.30106 105.27505 270.30106 102.43004 270.30106 99.5846 270.30106 96.73915 270.30106 93.89413 270.30106 91.04869 270.30106 88.20367 270.30106 85.35823 270.30106 82.51277 270.30106 79.66776 270.30106 76.82231 270.30106 73.9773 270.30106 71.13185 270.30106 68.2864 270.30106 65.44139 270.30106 62.59595 270.30106 59.75093 270.30106 56.90549 270.30106 54.06003 270.30106 51.21501 270.30106 48.36957 270.30106 45.52455 270.30106 42.67911 270.30106 39.83366 270.30106 36.98865 270.30106 34.1432 270.30106 31.29819 270.30106 28.45274 270.30106 25.60728 270.30106 22.76227 270.30106 19.91682 270.30106 17.07181 270.30106 14.22636 270.30106 11.38092 270.30106 8.5359 270.30106 5.69046 270.30106 2.84544 270.30106 0.0 270.30106 -2.84544 270.30106 -5.69046 270.30106 -8.5359 270.30106 -11.38092 270.30106 -14.22636 270.30106 -17.07181 270.30106 -19.91682 270.30106 -22.76227 270.30106 -25.60728 270.30106 -28.45274 270.30106 -31.29819 270.30106 -34.1432 270.30106 -36.98865 270.30106 -39.83366 270.30106 -42.67911 270.30106 -45.52455 270.30106 -48.36957 270.30106 -51.21501 270.30106 -54.06003 270.30106 -56.90549 270.30106 -59.75093 270.30106 -62.59595 270.30106 -65.44139 270.30106 -68.2864 270.30106 -71.13185 270.30106 -73.9773 270.30106 -76.82231 270.30106 -79.66776 270.30106 -82.51277 270.30106 -85.35823 270.30106 -88.20367 270.30106 -91.04869 270.30106 -93.89413 270.30106 -96.73915 270.30106 -99.5846 270.30106 -102.43004 270.30106 -105.27505 270.30106 -108.1205 270.30106 -110.96552 270.30106 -113.81097 270.30106 -116.65642 270.30106 -119.50143 270.30106 -122.34688 270.30106 -125.1919 270.30106 -128.03734 270.30106 -130.88278 270.30106 -133.7278 270.30106 -136.57324 270.30106 -139.41826 270.30106 -142.26372 270.30106  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fc 2882 139 a(nz)p Fe 21 w(+)p
Fd 3085 106 a(1)p 3085 120 V 3085 167 a(2) 1654 2362
y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 114.23775 139.41826 114.23775 136.57324 114.23775 133.7278 114.23775 130.88278 114.23775 128.03734 114.23775 125.1919 114.23775 122.34688 114.23817 119.50143 114.23817 116.65642 114.2386 113.81097 114.23904 110.96552 114.23991 108.1205 114.24121 105.27505 114.24295 102.43004 114.24643 99.5846 114.2512 96.73915 114.25858 93.89413 114.26987 91.04869 114.28636 88.20367 114.31024 85.35823 114.34497 82.51277 114.39404 79.66776 114.46307 76.82231 114.55858 73.9773 114.68796 71.13185 114.86162 68.2864 115.0913 65.44139 115.39085 62.59595 115.77551 59.75093 116.26308 56.90549 116.87045 54.06003 117.6172 51.21501 118.5198 48.36957 119.5952 45.52455 120.85512 42.67911 122.30693 39.83366 123.95282 36.98865 125.78539 34.1432 127.78857 31.29819 129.93764 28.45274 132.1961 25.60728 134.5184 22.76227 136.84937 19.91682 139.1278 17.07181 141.2873 14.22636 143.2601 11.38092 144.98065 8.5359 146.38948 5.69046 147.43492 2.84544 148.07834 0.0 148.29585 -2.84544 148.07834 -5.69046 147.43492 -8.5359 146.38948 -11.38092 144.98065 -14.22636 143.2601 -17.07181 141.2873 -19.91682 139.1278 -22.76227 136.84937 -25.60728 134.5184 -28.45274 132.1961 -31.29819 129.93764 -34.1432 127.78857 -36.98865 125.78539 -39.83366 123.95282 -42.67911 122.30693 -45.52455 120.85512 -48.36957 119.5952 -51.21501 118.5198 -54.06003 117.6172 -56.90549 116.87045 -59.75093 116.26308 -62.59595 115.77551 -65.44139 115.39085 -68.2864 115.0913 -71.13185 114.86162 -73.9773 114.68796 -76.82231 114.55858 -79.66776 114.46307 -82.51277 114.39404 -85.35823 114.34497 -88.20367 114.31024 -91.04869 114.28636 -93.89413 114.26987 -96.73915 114.25858 -99.5846 114.2512 -102.43004 114.24643 -105.27505 114.24295 -108.1205 114.24121 -110.96552 114.23991 -113.81097 114.23904 -116.65642 114.2386 -119.50143 114.23817 -122.34688 114.23817 -125.1919 114.23775 -128.03734 114.23775 -130.88278 114.23775 -133.7278 114.23775 -136.57324 114.23775 -139.41826 114.23775 -142.26372 114.23775  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial Fe 384 1441
a(1) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 132.1631 139.41826 132.1631 136.57324 132.1631 133.7278 132.1631 130.88278 132.1631 128.03734 132.1631 125.1919 132.1631 122.34688 132.1631 119.50143 132.1631 116.65642 132.16354 113.81097 132.16397 110.96552 132.16484 108.1205 132.16571 105.27505 132.16788 102.43004 132.17049 99.5846 132.17484 96.73915 132.18178 93.89413 132.19176 91.04869 132.20653 88.20367 132.2278 85.35823 132.25905 82.51277 132.3029 79.66776 132.36455 76.82231 132.44965 73.9773 132.56557 71.13185 132.72144 68.2864 132.92679 65.44139 133.19466 62.59595 133.53894 59.75093 133.97484 56.90549 134.5184 54.06003 135.18655 51.21501 135.99452 48.36957 136.9566 45.52455 138.08366 42.67911 139.38266 39.83366 140.85532 36.98865 142.49512 34.1432 144.28773 31.29819 146.21017 28.45274 148.23116 25.60728 150.3086 22.76227 152.39427 19.91682 154.43306 17.07181 156.36505 14.22636 158.13031 11.38092 159.66983 8.5359 160.93018 5.69046 161.86578 2.84544 162.44147 0.0 162.63597 -2.84544 162.44147 -5.69046 161.86578 -8.5359 160.93018 -11.38092 159.66983 -14.22636 158.13031 -17.07181 156.36505 -19.91682 154.43306 -22.76227 152.39427 -25.60728 150.3086 -28.45274 148.23116 -31.29819 146.21017 -34.1432 144.28773 -36.98865 142.49512 -39.83366 140.85532 -42.67911 139.38266 -45.52455 138.08366 -48.36957 136.9566 -51.21501 135.99452 -54.06003 135.18655 -56.90549 134.5184 -59.75093 133.97484 -62.59595 133.53894 -65.44139 133.19466 -68.2864 132.92679 -71.13185 132.72144 -73.9773 132.56557 -76.82231 132.44965 -79.66776 132.36455 -82.51277 132.3029 -85.35823 132.25905 -88.20367 132.2278 -91.04869 132.20653 -93.89413 132.19176 -96.73915 132.18178 -99.5846 132.17484 -102.43004 132.17049 -105.27505 132.16788 -108.1205 132.16571 -110.96552 132.16484 -113.81097 132.16397 -116.65642 132.16354 -119.50143 132.1631 -122.34688 132.1631 -125.1919 132.1631 -128.03734 132.1631 -130.88278 132.1631 -133.7278 132.1631 -136.57324 132.1631 -139.41826 132.1631 -142.26372 132.1631  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial
384 1292 a(2) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 150.08804 139.41826 150.08804 136.57324 150.08804 133.7278 150.08804 130.88278 150.08804 128.03734 150.08804 125.1919 150.08804 122.34688 150.08847 119.50143 150.08847 116.65642 150.08891 113.81097 150.08891 110.96552 150.08978 108.1205 150.09065 105.27505 150.09238 102.43004 150.09499 99.5846 150.09889 96.73915 150.10454 93.89413 150.11366 91.04869 150.12668 88.20367 150.14578 85.35823 150.17314 82.51277 150.21178 79.66776 150.26648 76.82231 150.34158 73.9773 150.44362 71.13185 150.58081 68.2864 150.76186 65.44139 150.9989 62.59595 151.30237 59.75093 151.68703 56.90549 152.16678 54.06003 152.75592 51.21501 153.4688 48.36957 154.31757 45.52455 155.31223 42.67911 156.45882 39.83366 157.75781 36.98865 159.20442 34.1432 160.78647 31.29819 162.48315 28.45274 164.2658 25.60728 166.09923 22.76227 167.9396 19.91682 169.7383 17.07181 171.4428 14.22636 173.00053 11.38092 174.35901 8.5359 175.47131 5.69046 176.29665 2.84544 176.8046 0.0 176.97609 -2.84544 176.8046 -5.69046 176.29665 -8.5359 175.47131 -11.38092 174.35901 -14.22636 173.00053 -17.07181 171.4428 -19.91682 169.7383 -22.76227 167.9396 -25.60728 166.09923 -28.45274 164.2658 -31.29819 162.48315 -34.1432 160.78647 -36.98865 159.20442 -39.83366 157.75781 -42.67911 156.45882 -45.52455 155.31223 -48.36957 154.31757 -51.21501 153.4688 -54.06003 152.75592 -56.90549 152.16678 -59.75093 151.68703 -62.59595 151.30237 -65.44139 150.9989 -68.2864 150.76186 -71.13185 150.58081 -73.9773 150.44362 -76.82231 150.34158 -79.66776 150.26648 -82.51277 150.21178 -85.35823 150.17314 -88.20367 150.14578 -91.04869 150.12668 -93.89413 150.11366 -96.73915 150.10454 -99.5846 150.09889 -102.43004 150.09499 -105.27505 150.09238 -108.1205 150.09065 -110.96552 150.08978 -113.81097 150.08891 -116.65642 150.08891 -119.50143 150.08847 -122.34688 150.08847 -125.1919 150.08804 -128.03734 150.08804 -130.88278 150.08804 -133.7278 150.08804 -136.57324 150.08804 -139.41826 150.08804 -142.26372 150.08804  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial
384 1143 a(3) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 213.39557 139.41826 213.39557 136.57324 213.39557 133.7278 213.39557 130.88278 213.39557 128.03734 213.39557 125.1919 213.39557 122.34688 213.39557 119.50143 213.39557 116.65642 213.39557 113.81097 213.39557 110.96552 213.39557 108.1205 213.39557 105.27505 213.39557 102.43004 213.39557 99.5846 213.39557 96.73915 213.39557 93.89413 213.39557 91.04869 213.39557 88.20367 213.39557 85.35823 213.39557 82.51277 213.39557 79.66776 213.39557 76.82231 213.39557 73.9773 213.39557 71.13185 213.39557 68.2864 213.39557 65.44139 213.39557 62.59595 213.39557 59.75093 213.39557 56.90549 213.39557 54.06003 213.39557 51.21501 213.39557 48.36957 213.39557 45.52455 213.39557 42.67911 213.39557 39.83366 213.39557 36.98865 213.39557 34.1432 213.39557 31.29819 213.39557 28.45274 213.39557 25.60728 213.39557 22.76227 213.39557 19.91682 213.39557 17.07181 213.39557 14.22636 213.39557 11.38092 213.39557 8.5359 213.39557 5.69046 213.39557 2.84544 213.39557 0.0 213.39557 -2.84544 213.39557 -5.69046 213.39557 -8.5359 213.39557 -11.38092 213.39557 -14.22636 213.39557 -17.07181 213.39557 -19.91682 213.39557 -22.76227 213.39557 -25.60728 213.39557 -28.45274 213.39557 -31.29819 213.39557 -34.1432 213.39557 -36.98865 213.39557 -39.83366 213.39557 -42.67911 213.39557 -45.52455 213.39557 -48.36957 213.39557 -51.21501 213.39557 -54.06003 213.39557 -56.90549 213.39557 -59.75093 213.39557 -62.59595 213.39557 -65.44139 213.39557 -68.2864 213.39557 -71.13185 213.39557 -73.9773 213.39557 -76.82231 213.39557 -79.66776 213.39557 -82.51277 213.39557 -85.35823 213.39557 -88.20367 213.39557 -91.04869 213.39557 -93.89413 213.39557 -96.73915 213.39557 -99.5846 213.39557 -102.43004 213.39557 -105.27505 213.39557 -108.1205 213.39557 -110.96552 213.39557 -113.81097 213.39557 -116.65642 213.39557 -119.50143 213.39557 -122.34688 213.39557 -125.1919 213.39557 -128.03734 213.39557 -130.88278 213.39557 -133.7278 213.39557 -136.57324 213.39557 -139.41826 213.39557 -142.26372 213.39557  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial
Fc 190 614 a(nz)p Fb 22 w(\000)p Fe 18 w(2) 1654 2362
y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 241.84831 139.41826 241.84831 136.57324 241.84831 133.7278 241.84831 130.88278 241.84831 128.03734 241.84831 125.1919 241.84831 122.34688 241.84831 119.50143 241.84831 116.65642 241.84831 113.81097 241.84831 110.96552 241.84831 108.1205 241.84831 105.27505 241.84831 102.43004 241.84831 99.5846 241.84831 96.73915 241.84831 93.89413 241.84831 91.04869 241.84831 88.20367 241.84831 85.35823 241.84831 82.51277 241.84831 79.66776 241.84831 76.82231 241.84831 73.9773 241.84831 71.13185 241.84831 68.2864 241.84831 65.44139 241.84831 62.59595 241.84831 59.75093 241.84831 56.90549 241.84831 54.06003 241.84831 51.21501 241.84831 48.36957 241.84831 45.52455 241.84831 42.67911 241.84831 39.83366 241.84831 36.98865 241.84831 34.1432 241.84831 31.29819 241.84831 28.45274 241.84831 25.60728 241.84831 22.76227 241.84831 19.91682 241.84831 17.07181 241.84831 14.22636 241.84831 11.38092 241.84831 8.5359 241.84831 5.69046 241.84831 2.84544 241.84831 0.0 241.84831 -2.84544 241.84831 -5.69046 241.84831 -8.5359 241.84831 -11.38092 241.84831 -14.22636 241.84831 -17.07181 241.84831 -19.91682 241.84831 -22.76227 241.84831 -25.60728 241.84831 -28.45274 241.84831 -31.29819 241.84831 -34.1432 241.84831 -36.98865 241.84831 -39.83366 241.84831 -42.67911 241.84831 -45.52455 241.84831 -48.36957 241.84831 -51.21501 241.84831 -54.06003 241.84831 -56.90549 241.84831 -59.75093 241.84831 -62.59595 241.84831 -65.44139 241.84831 -68.2864 241.84831 -71.13185 241.84831 -73.9773 241.84831 -76.82231 241.84831 -79.66776 241.84831 -82.51277 241.84831 -85.35823 241.84831 -88.20367 241.84831 -91.04869 241.84831 -93.89413 241.84831 -96.73915 241.84831 -99.5846 241.84831 -102.43004 241.84831 -105.27505 241.84831 -108.1205 241.84831 -110.96552 241.84831 -113.81097 241.84831 -116.65642 241.84831 -119.50143 241.84831 -122.34688 241.84831 -125.1919 241.84831 -128.03734 241.84831 -130.88278 241.84831 -133.7278 241.84831 -136.57324 241.84831 -139.41826 241.84831 -142.26372 241.84831  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial Fc 190 378 a(nz)p
Fb 22 w(\000)p Fe 18 w(1) 1654 2362 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 142.26372 263.18787 139.41826 263.18787 136.57324 263.18787 133.7278 263.18787 130.88278 263.18787 128.03734 263.18787 125.1919 263.18787 122.34688 263.18787 119.50143 263.18787 116.65642 263.18787 113.81097 263.18787 110.96552 263.18787 108.1205 263.18787 105.27505 263.18787 102.43004 263.18787 99.5846 263.18787 96.73915 263.18787 93.89413 263.18787 91.04869 263.18787 88.20367 263.18787 85.35823 263.18787 82.51277 263.18787 79.66776 263.18787 76.82231 263.18787 73.9773 263.18787 71.13185 263.18787 68.2864 263.18787 65.44139 263.18787 62.59595 263.18787 59.75093 263.18787 56.90549 263.18787 54.06003 263.18787 51.21501 263.18787 48.36957 263.18787 45.52455 263.18787 42.67911 263.18787 39.83366 263.18787 36.98865 263.18787 34.1432 263.18787 31.29819 263.18787 28.45274 263.18787 25.60728 263.18787 22.76227 263.18787 19.91682 263.18787 17.07181 263.18787 14.22636 263.18787 11.38092 263.18787 8.5359 263.18787 5.69046 263.18787 2.84544 263.18787 0.0 263.18787 -2.84544 263.18787 -5.69046 263.18787 -8.5359 263.18787 -11.38092 263.18787 -14.22636 263.18787 -17.07181 263.18787 -19.91682 263.18787 -22.76227 263.18787 -25.60728 263.18787 -28.45274 263.18787 -31.29819 263.18787 -34.1432 263.18787 -36.98865 263.18787 -39.83366 263.18787 -42.67911 263.18787 -45.52455 263.18787 -48.36957 263.18787 -51.21501 263.18787 -54.06003 263.18787 -56.90549 263.18787 -59.75093 263.18787 -62.59595 263.18787 -65.44139 263.18787 -68.2864 263.18787 -71.13185 263.18787 -73.9773 263.18787 -76.82231 263.18787 -79.66776 263.18787 -82.51277 263.18787 -85.35823 263.18787 -88.20367 263.18787 -91.04869 263.18787 -93.89413 263.18787 -96.73915 263.18787 -99.5846 263.18787 -102.43004 263.18787 -105.27505 263.18787 -108.1205 263.18787 -110.96552 263.18787 -113.81097 263.18787 -116.65642 263.18787 -119.50143 263.18787 -122.34688 263.18787 -125.1919 263.18787 -128.03734 263.18787 -130.88278 263.18787 -133.7278 263.18787 -136.57324 263.18787 -139.41826 263.18787 -142.26372 263.18787  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end


@endspecial Fc 333 195 a(nz) 1654 2362 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -85.35823 71.13185 -113.81097 71.13185  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fa 992 1798 a<254f>p 1072 1798
a<213c>p 1152 1798 a<2555>p 1232 1798 a<256c>p 1312 1798
a<2559>p 1392 1798 a<256b>p 1654 2362 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 56.90549 71.13185 28.45274 71.13185  /Lineto /lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine  grestore end
 
@endspecial 2173 1798 a<2555>p 2253 1798
a<256b>p 2333 1798 a<256c>p 2413 1798 a<2559>p 2493 1798
a<256b>p dyy eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
